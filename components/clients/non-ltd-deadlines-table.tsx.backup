'use client'

import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useUsers, type User as UserType } from '@/lib/hooks/useUsers'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { PageLayout, PageHeader, PageContent } from '@/components/layout/page-layout'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator
} from '@/components/ui/dropdown-menu'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { 
  ChevronDown, 
  ChevronRight, 
  ChevronUp, 
  Plus, 
  Calendar, 
  User, 
  CheckCircle, 
  Clock, 
  FileText,
  Send,
  UserCheck,
  Building,
  RefreshCw,
  Users,
  Phone,
  ArrowUpDown,
  AlertCircle,
  XCircle,
  Briefcase,
  Eye,
  MessageSquare,
  Settings,
  Edit,
  UserPlus,
  Filter,
  Undo2,
  X,
  Search,
  AlertTriangle,
  Mail
} from 'lucide-react'
import { showToast } from '@/lib/toast'
import { ActivityLogViewer } from '@/components/activity/activity-log-viewer'
import { AdvancedFilterModal } from './advanced-filter-modal'
import { SendEmailModal } from './send-email-modal'
import { NonLtdWorkflowModal } from './non-ltd-workflow-modal'
import { validateStageTransition, getSelectableStages } from '@/lib/workflow-validation'

interface NonLtdAccountsWorkflow {
  id: string
  yearEndDate: string
  filingDueDate: string
  currentStage: string
  isCompleted: boolean
  assignedUser?: {
    id: string
    name: string
    email: string
    role: string
  }
  // Milestone dates with user attribution
  chaseStartedDate?: string
  chaseStartedByUserName?: string
  paperworkReceivedDate?: string
  paperworkReceivedByUserName?: string
  workStartedDate?: string
  workStartedByUserName?: string
  managerDiscussionDate?: string
  managerDiscussionByUserName?: string
  partnerReviewDate?: string
  partnerReviewByUserName?: string
  reviewCompletedDate?: string
  reviewCompletedByUserName?: string
  sentToClientDate?: string
  sentToClientByUserName?: string
  clientApprovedDate?: string
  clientApprovedByUserName?: string
  partnerApprovedDate?: string
  partnerApprovedByUserName?: string
  filedDate?: string
  filedByUserName?: string
  filedToHMRCDate?: string
  filedToHMRCByUserName?: string
}

interface NonLtdClient {
  id: string
  clientCode: string
  companyName: string
  companyType?: string
  contactName?: string
  contactEmail?: string
  contactPhone?: string
  
  // Non-Ltd specific assignee
  nonLtdCompanyAssignedUser?: {
    id: string
    name: string
    email: string
    role: string
  }
  
  // General assignment fallback
  assignedUser?: {
    id: string
    name: string
    email: string
    role: string
  }
  
  // Current Non-Ltd workflow info
  currentNonLtdAccountsWorkflow?: NonLtdAccountsWorkflow | null
}

interface WorkflowStage {
  key: string
  label: string
  icon: React.ReactNode
  color: string
}

interface FilterCondition {
  id: string
  field: string
  operator: string
  value: string | string[] | boolean | null
  value2?: string
}

interface FilterGroup {
  id: string
  operator: 'AND' | 'OR'
  conditions: FilterCondition[]
}

interface AdvancedFilter {
  id: string
  name: string
  groups: FilterGroup[]
  groupOperator: 'AND' | 'OR'
}

interface NonLtdDeadlinesTableProps {
  focusClientId?: string
  focusWorkflowId?: string
}

export function NonLtdDeadlinesTable({ 
  focusClientId, 
  focusWorkflowId 
}: NonLtdDeadlinesTableProps = {}) {
  const { data: session } = useSession()
  const router = useRouter()
  const searchParams = useSearchParams()
  const { users, loading: usersLoading } = useUsers()
  
  const getInitialFilter = () => {
    const filterParam = searchParams.get('filter')
    if (filterParam === 'all') return 'all'
    return 'assigned_to_me' // Default to "assigned to me" like Ltd companies
  }

  // State management
  const [nonLtdClients, setNonLtdClients] = useState<NonLtdClient[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [totalCount, setTotalCount] = useState(0)
  const [currentPage, setCurrentPage] = useState(1)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortField, setSortField] = useState('filingDue')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc')
  
  // Filter states
  const [filter, setFilter] = useState<'assigned_to_me' | 'all'>(getInitialFilter())
  const [userFilter, setUserFilter] = useState<string>('all')
  const [selectedWorkflowStageFilter, setSelectedWorkflowStageFilter] = useState<string>('all')
  const [advancedFilter, setAdvancedFilter] = useState<AdvancedFilter | null>(null)
  const [advancedFilterModalOpen, setAdvancedFilterModalOpen] = useState(false)
  
  // Selection states
  const [selectedClients, setSelectedClients] = useState<Set<string>>(new Set())
  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set())
  
  // Modal states
  const [selectedClient, setSelectedClient] = useState<NonLtdClient | null>(null)
  const [selectedWorkflow, setSelectedWorkflow] = useState<NonLtdAccountsWorkflow | null>(null)
  const [selectedStage, setSelectedStage] = useState<string>('')
  const [selectedAssignee, setSelectedAssignee] = useState<string>('')
  const [updateComments, setUpdateComments] = useState<string>('')
  const [updating, setUpdating] = useState(false)
  const [showUpdateModal, setShowUpdateModal] = useState(false)

  // Other modal states
  const [showActivityLogModal, setShowActivityLogModal] = useState(false)
  const [activityLogClient, setActivityLogClient] = useState<NonLtdClient | null>(null)
  const [sendEmailModalOpen, setSendEmailModalOpen] = useState(false)
  const [emailClient, setEmailClient] = useState<NonLtdClient | null>(null)

  // Workflow stages for Non-Ltd companies - Updated with proper color classes matching Ltd companies
  const WORKFLOW_STAGES: WorkflowStage[] = [
    { key: 'WAITING_FOR_YEAR_END', label: 'Waiting for Year End', icon: <Calendar className="h-4 w-4" />, color: 'bg-gray-100 text-gray-800' },
    { key: 'PAPERWORK_PENDING_CHASE', label: 'Pending to Chase Paperwork', icon: <Clock className="h-4 w-4" />, color: 'bg-amber-100 text-amber-800' },
    { key: 'PAPERWORK_CHASED', label: 'Paperwork Chased', icon: <Phone className="h-4 w-4" />, color: 'bg-yellow-100 text-yellow-800' },
    { key: 'PAPERWORK_RECEIVED', label: 'Paperwork Received', icon: <FileText className="h-4 w-4" />, color: 'bg-blue-100 text-blue-800' },
    { key: 'WORK_IN_PROGRESS', label: 'Work in Progress', icon: <Briefcase className="h-4 w-4" />, color: 'bg-green-100 text-green-800' },
    { key: 'DISCUSS_WITH_MANAGER', label: 'To Discuss with Manager', icon: <MessageSquare className="h-4 w-4" />, color: 'bg-purple-100 text-purple-800' },
    { key: 'REVIEWED_BY_MANAGER', label: 'Reviewed by Manager', icon: <CheckCircle className="h-4 w-4" />, color: 'bg-green-100 text-green-800' },
    { key: 'REVIEW_BY_PARTNER', label: 'To Review by Partner', icon: <Eye className="h-4 w-4" />, color: 'bg-indigo-100 text-indigo-800' },
    { key: 'REVIEWED_BY_PARTNER', label: 'Reviewed by Partner', icon: <CheckCircle className="h-4 w-4" />, color: 'bg-green-100 text-green-800' },
    { key: 'REVIEW_DONE_HELLO_SIGN', label: 'Review Done - Hello Sign to Client', icon: <CheckCircle className="h-4 w-4" />, color: 'bg-emerald-100 text-emerald-800' },
    { key: 'SENT_TO_CLIENT_HELLO_SIGN', label: 'Sent to client on Hello Sign', icon: <Send className="h-4 w-4" />, color: 'bg-cyan-100 text-cyan-800' },
    { key: 'APPROVED_BY_CLIENT', label: 'Approved by Client', icon: <UserCheck className="h-4 w-4" />, color: 'bg-teal-100 text-teal-800' },
    { key: 'SUBMISSION_APPROVED_PARTNER', label: 'Submission Approved by Partner', icon: <CheckCircle className="h-4 w-4" />, color: 'bg-green-100 text-green-800' },
    { key: 'FILED_TO_HMRC', label: 'Filed to HMRC', icon: <Building className="h-4 w-4" />, color: 'bg-green-100 text-green-800' },
  ]

  const ALL_WORKFLOW_STAGES = WORKFLOW_STAGES

  // Fetch non-Ltd companies data
  const fetchNonLtdClients = useCallback(async (forceRefresh = false, page = 1) => {
    try {
      if (!forceRefresh && nonLtdClients.length > 0 && page === currentPage) {
        return
      }

      setLoading(true)
      const params = new URLSearchParams({
        page: page.toString(),
        limit: '50',
        assignedFilter: filter,
        userFilter: userFilter,
        workflowStageFilter: selectedWorkflowStageFilter,
        searchTerm: searchTerm,
        sortField: sortField,
        sortOrder: sortOrder,
      })

      const response = await fetch(`/api/clients/non-ltd-deadlines?${params}`)
      const result = await response.json()

      if (result.success) {
        setNonLtdClients(result.data)
        setTotalCount(result.pagination.total)
        setCurrentPage(page)
      } else {
        showToast.error(result.error || 'Failed to fetch non-Ltd companies')
      }
    } catch (error) {
      console.error('Error fetching non-Ltd companies:', error)
      showToast.error('Failed to fetch non-Ltd companies')
    } finally {
      setLoading(false)
    }
  }, [filter, userFilter, selectedWorkflowStageFilter, searchTerm, sortField, sortOrder, nonLtdClients.length, currentPage])

  // Focus on specific client if provided
  useEffect(() => {
    if (focusClientId && nonLtdClients.length > 0) {
      const client = nonLtdClients.find(c => c.id === focusClientId)
      if (client) {
        setExpandedRows(new Set([focusClientId]))
      }
    }
  }, [focusClientId, nonLtdClients])

  // Initial load and refresh when filters change
  useEffect(() => {
    fetchNonLtdClients(true, 1)
  }, [filter, userFilter, selectedWorkflowStageFilter, searchTerm, sortField, sortOrder])

  // Handle filter changes
  const handleFilterChange = (newFilter: 'assigned_to_me' | 'all') => {
    setFilter(newFilter)
    setCurrentPage(1)
  }

  const handleUserFilterChange = (newUserFilter: string) => {
    setUserFilter(newUserFilter)
    setCurrentPage(1)
  }

  const handleApplyAdvancedFilters = (filter: AdvancedFilter | null) => {
    setAdvancedFilter(filter)
    setAdvancedFilterModalOpen(false)
    setCurrentPage(1)
    fetchNonLtdClients(true, 1)
  }

  const hasActiveAdvancedFilters = () => {
    return advancedFilter !== null
  }

  const clearAdvancedFilter = () => {
    setAdvancedFilter(null)
    fetchNonLtdClients(true, 1)
  }

  const handleSelectClient = (clientId: string, checked: boolean) => {
    if (checked) {
      setSelectedClients(prev => new Set([...prev, clientId]))
    } else {
      setSelectedClients(prev => new Set([...prev].filter(id => id !== clientId)))
    }
  }

  const handleSelectAllClients = (checked: boolean) => {
    if (checked) {
      setSelectedClients(new Set(nonLtdClients.map(client => client.id)))
    } else {
      setSelectedClients(new Set())
    }
  }

  const handleClearSelection = () => {
    setSelectedClients(new Set())
  }

  // Date formatting
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'Not set'
    
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('en-GB', {
        day: '2-digit',
        month: 'short',
        year: 'numeric'
      })
    } catch (error) {
      return 'Invalid date'
    }
  }

  const getDaysUntilDue = (dueDateString?: string, workflow?: NonLtdAccountsWorkflow | null) => {
    if (!dueDateString) return null
    
    try {
      const dueDate = new Date(dueDateString)
      const today = new Date()
      const diffTime = dueDate.getTime() - today.getTime()
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      
      if (workflow?.isCompleted) {
        return { days: diffDays, status: 'completed' }
      }
      
      if (diffDays < 0) {
        return { days: Math.abs(diffDays), status: 'overdue' }
      } else if (diffDays <= 30) {
        return { days: diffDays, status: 'due_soon' }
      } else {
        return { days: diffDays, status: 'upcoming' }
      }
    } catch (error) {
      return null
    }
  }

  const isRecentlyFiled = (workflow: NonLtdAccountsWorkflow | null) => {
    if (!workflow?.filedToHMRCDate) return false
    const filedDate = new Date(workflow.filedToHMRCDate)
    const now = new Date()
    const diffDays = Math.ceil((now.getTime() - filedDate.getTime()) / (1000 * 60 * 60 * 24))
    return diffDays <= 30
  }

  // Workflow timeline rendering - Enhanced like Ltd companies
  const renderNonLtdWorkflowTimeline = (client: NonLtdClient) => {
    const workflow = client.currentNonLtdAccountsWorkflow
    if (!workflow) {
      return <p className="text-sm text-muted-foreground">No workflow started yet</p>
    }

    // Define milestone timeline for Non-Ltd Companies workflow
    const milestones = [
      { 
        id: 'CHASE_STARTED', 
        date: workflow.chaseStartedDate, 
        user: workflow.chaseStartedByUserName,
        label: 'Chase Started',
        icon: <Phone className="h-4 w-4" />
      },
      { 
        id: 'PAPERWORK_RECEIVED', 
        date: workflow.paperworkReceivedDate, 
        user: workflow.paperworkReceivedByUserName,
        label: 'Paperwork Received',
        icon: <FileText className="h-4 w-4" />
      },
      { 
        id: 'WORK_STARTED', 
        date: workflow.workStartedDate, 
        user: workflow.workStartedByUserName,
        label: 'Work Started',
        icon: <Briefcase className="h-4 w-4" />
      },
      { 
        id: 'MANAGER_DISCUSSION', 
        date: workflow.managerDiscussionDate, 
        user: workflow.managerDiscussionByUserName,
        label: 'Manager Review',
        icon: <MessageSquare className="h-4 w-4" />
      },
      { 
        id: 'PARTNER_REVIEW', 
        date: workflow.partnerReviewDate, 
        user: workflow.partnerReviewByUserName,
        label: 'Partner Review',
        icon: <Eye className="h-4 w-4" />
      },
      { 
        id: 'REVIEW_COMPLETED', 
        date: workflow.reviewCompletedDate, 
        user: workflow.reviewCompletedByUserName,
        label: 'Review Complete',
        icon: <CheckCircle className="h-4 w-4" />
      },
      { 
        id: 'SENT_TO_CLIENT', 
        date: workflow.sentToClientDate, 
        user: workflow.sentToClientByUserName,
        label: 'Sent to Client',
        icon: <Send className="h-4 w-4" />
      },
      { 
        id: 'CLIENT_APPROVED', 
        date: workflow.clientApprovedDate, 
        user: workflow.clientApprovedByUserName,
        label: 'Client Approved',
        icon: <UserCheck className="h-4 w-4" />
      },
      { 
        id: 'PARTNER_APPROVED', 
        date: workflow.partnerApprovedDate, 
        user: workflow.partnerApprovedByUserName,
        label: 'Partner Approved',
        icon: <CheckCircle className="h-4 w-4" />
      },
      { 
        id: 'FILED_TO_HMRC', 
        date: workflow.filedToHMRCDate, 
        user: workflow.filedToHMRCByUserName,
        label: 'Filed to HMRC',
        icon: <FileText className="h-4 w-4" />
      }
    ]

    // Helper function to calculate days between two dates
    const calculateDaysBetween = (startDate: string, endDate: string): number => {
      const start = new Date(startDate)
      const end = new Date(endDate)
      const diffTime = Math.abs(end.getTime() - start.getTime())
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    }

    // Calculate days between consecutive completed milestones
    const milestonesWithDays = milestones.map((milestone, index) => {
      let daysBetween = null
      
      if (milestone.date && index > 0) {
        // Find the previous completed milestone
        const previousMilestones = milestones.slice(0, index).reverse()
        const previousCompletedMilestone = previousMilestones.find(m => m.date)
        
        if (previousCompletedMilestone?.date) {
          daysBetween = calculateDaysBetween(previousCompletedMilestone.date, milestone.date)
        }
      }
      
      return {
        ...milestone,
        daysBetween
      }
    })

    return (
      <div className="relative overflow-x-auto">
        {/* Timeline Items with Connectors */}
        <div className="flex items-center justify-between min-w-full pb-4">
          {milestonesWithDays.map((milestone, index) => {
            const isCompleted = !!milestone.date
            const isLastItem = index === milestonesWithDays.length - 1
            const nextMilestone = milestonesWithDays[index + 1]
            
            return (
              <React.Fragment key={milestone.id}>
                {/* Milestone Node and Label */}
                <div className="flex flex-col items-center text-center flex-shrink-0">
                  {/* Timeline Node */}
                  <div className={`
                    w-12 h-12 rounded-full border-2 flex items-center justify-center mb-3
                    ${isCompleted 
                      ? 'bg-green-100 border-green-500 text-green-700' 
                      : 'bg-gray-100 border-gray-300 text-gray-400'
                    }
                  `}>
                    {milestone.icon}
                  </div>
                  
                  {/* Stage Label */}
                  <div className="px-2 w-24">
                    <p className="text-xs font-medium text-gray-900 leading-tight mb-1">
                      {milestone.label}
                    </p>
                    {isCompleted ? (
                      <div>
                        <p className="text-xs text-green-600 font-medium">
                          {formatDate(milestone.date)}
                        </p>
                        {milestone.user && (
                          <p className="text-xs text-gray-500 mt-0.5">
                            by {milestone.user}
                          </p>
                        )}
                      </div>
                    ) : (
                      <p className="text-xs text-gray-400">Pending</p>
                    )}
                  </div>
                </div>
                
                {/* Connector with Days Count */}
                {!isLastItem && (
                  <div className="flex-1 flex flex-col items-center px-2 min-w-[60px] max-w-[120px]">
                    {/* Days Count Badge - Aligned with timeline nodes */}
                    <div className="h-12 flex items-center mb-3">
                      {nextMilestone?.daysBetween !== null && nextMilestone && (
                        <div className="inline-flex items-center justify-center bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium whitespace-nowrap">
                          {nextMilestone.daysBetween} day{nextMilestone.daysBetween !== 1 ? 's' : ''}
                        </div>
                      )}
                    </div>
                    
                    {/* Connector Line */}
                    <div className={`
                      h-0.5 w-full
                      ${isCompleted && nextMilestone?.date 
                        ? 'bg-green-400' 
                        : 'bg-gray-300'
                      }
                    `}></div>
                    
                    {/* Spacer to match milestone label height */}
                    <div className="flex-1"></div>
                  </div>
                )}
              </React.Fragment>
            )
          })}
        </div>
      </div>
    )
  }

  // Get workflow status for display
  const getWorkflowStatus = (workflow: NonLtdAccountsWorkflow | null) => {
    if (!workflow) {
      return { status: 'Not Started', variant: 'secondary' as const, priority: 0 }
    }

    if (workflow.isCompleted) {
      return { status: 'Completed', variant: 'secondary' as const, priority: 10 }
    }

    const stage = WORKFLOW_STAGES.find(s => s.key === workflow.currentStage)
    if (stage) {
      return { 
        status: stage.label, 
        variant: stage.color.includes('bg-green') ? 'secondary' as const : 
                stage.color.includes('bg-amber') ? 'secondary' as const : 
                stage.color.includes('bg-yellow') ? 'secondary' as const : 
                stage.color.includes('bg-blue') ? 'secondary' as const : 
                stage.color.includes('bg-purple') ? 'secondary' as const : 
                'secondary' as const,
        priority: WORKFLOW_STAGES.findIndex(s => s.key === workflow.currentStage) + 1
      }
    }

    return { status: workflow.currentStage, variant: 'secondary' as const, priority: 1 }
  }

  // Handle sorting
  const handleSort = (column: string) => {
    if (sortField === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(column)
      setSortOrder('asc')
    }
  }

  // Sortable header component
  const SortableHeader = ({ column, children, className = "" }: { 
    column: string, 
    children: React.ReactNode, 
    className?: string 
  }) => (
    <TableHead className={`cursor-pointer hover:bg-muted/50 ${className}`} onClick={() => handleSort(column)}>
      <div className="flex items-center gap-1">
        {children}
        <ArrowUpDown className="h-3 w-3" />
      </div>
    </TableHead>
  )

  // Handle workflow update
  const handleStageChange = (stageKey: string) => {
    setSelectedStage(stageKey)
  }

  const handleSubmitUpdate = async () => {
    if (!selectedClient || !selectedStage) return

    try {
      setUpdating(true)
      const currentStage = selectedClient.currentNonLtdAccountsWorkflow?.currentStage

      // Validate stage transition
      const validation = validateStageTransition(currentStage || null, selectedStage, 'NON_LTD')
      if (!validation.isValid) {
        showToast.error(validation.message)
        return
      }

      const response = await fetch(`/api/clients/non-ltd-deadlines/${selectedClient.currentNonLtdAccountsWorkflow?.id}/workflow`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentStage: selectedStage,
          assignedUserId: selectedAssignee === 'unassigned' ? null : selectedAssignee,
          notes: updateComments
        }),
      })

      if (response.ok) {
        showToast.success('Workflow updated successfully')
        setShowUpdateModal(false)
        setUpdateComments('')
        fetchNonLtdClients(true, currentPage)
      } else {
        const error = await response.json()
        showToast.error(error.error || 'Failed to update workflow')
      }
    } catch (error) {
      console.error('Error updating workflow:', error)
      showToast.error('Failed to update workflow')
    } finally {
      setUpdating(false)
    }
  }

  const handleViewActivityLog = (client: NonLtdClient) => {
    setActivityLogClient(client)
    setShowActivityLogModal(true)
  }

  // Calculate summary statistics
  const currentMonthName = new Date().toLocaleString('default', { month: 'long' })
  const currentMonthClients = nonLtdClients.filter(client => {
    const dueInfo = getDaysUntilDue(client.currentNonLtdAccountsWorkflow?.filingDueDate, client.currentNonLtdAccountsWorkflow)
    return dueInfo && dueInfo.days <= 30
  })
  
  const next30DaysClients = nonLtdClients.filter(client => {
    const dueInfo = getDaysUntilDue(client.currentNonLtdAccountsWorkflow?.filingDueDate, client.currentNonLtdAccountsWorkflow)
    return dueInfo && dueInfo.status === 'due_soon'
  })
  
  const next60DaysClients = nonLtdClients.filter(client => {
    const dueInfo = getDaysUntilDue(client.currentNonLtdAccountsWorkflow?.filingDueDate, client.currentNonLtdAccountsWorkflow)
    return dueInfo && dueInfo.days > 30 && dueInfo.days <= 60
  })
  
  const next90DaysClients = nonLtdClients.filter(client => {
    const dueInfo = getDaysUntilDue(client.currentNonLtdAccountsWorkflow?.filingDueDate, client.currentNonLtdAccountsWorkflow)
    return dueInfo && dueInfo.days > 60 && dueInfo.days <= 90
  })

  // Calculate user client counts for filter display
  const userClientCounts = useMemo(() => {
    const counts: Record<string, number> = {}
    users.forEach(user => {
      counts[user.id] = nonLtdClients.filter(client => {
        const assigneeId = client.currentNonLtdAccountsWorkflow?.assignedUser?.id || 
                          client.nonLtdCompanyAssignedUser?.id ||
                          client.assignedUser?.id
        return assigneeId === user.id
      }).length
    })
    return counts
  }, [users, nonLtdClients])

  const unassignedCount = nonLtdClients.filter(client => {
    const assigneeId = client.currentNonLtdAccountsWorkflow?.assignedUser?.id || 
                      client.nonLtdCompanyAssignedUser?.id ||
                      client.assignedUser?.id
    return !assigneeId
  }).length

  if (loading) {
    return (
      <div className="page-container">
        <div className="content-wrapper">
          <div className="content-sections">
            <Card>
              <CardContent className="flex items-center justify-center py-8">
                <RefreshCw className="h-6 w-6 animate-spin mr-2" />
                Loading Non-Ltd Companies deadlines...
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      <PageLayout maxWidth="xl">
        <PageHeader 
          title="Non-Ltd Companies - Deadlines"
          description="Manage Non-Ltd companies accounts workflow and deadlines"
        >
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => fetchNonLtdClients(true, 1)}
              disabled={loading}
            >
              <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              Refresh Data
            </Button>
          </div>
        </PageHeader>
        
        <PageContent>
          {/* Search Bar - Full Width */}
          <div className="w-full mb-6">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none" />
              <Input
                placeholder="Search non-Ltd companies..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-full"
              />
              {searchTerm && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0"
                >
                  <X className="h-3 w-3" />
                </Button>
              )}
            </div>
          </div>

          {/* Filter Buttons and Additional Filters */}
          <div className="flex flex-col gap-4 mb-6">
            <div className="flex gap-2">
              <Button
                variant={filter === 'assigned_to_me' ? 'default' : 'outline'}
                onClick={() => handleFilterChange('assigned_to_me')}
                className="flex items-center gap-2"
              >
                <User className="h-4 w-4" />
                Assigned to Me
              </Button>
              <Button
                variant={filter === 'all' ? 'default' : 'outline'}
                onClick={() => handleFilterChange('all')}
                className="flex items-center gap-2"
              >
                <Users className="h-4 w-4" />
                All Clients
              </Button>
            </div>

            {/* Additional Filters */}
            <div className="flex flex-wrap gap-2 items-center">
              {/* Assigned to Filter Dropdown */}
              <div className="flex items-center gap-2">
                <Label htmlFor="assigned-to" className="text-sm font-medium whitespace-nowrap">
                  Assigned to:
                </Label>
                <Select value={userFilter} onValueChange={handleUserFilterChange}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="All Users" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">
                      <div className="flex items-center gap-2">
                        <Users className="h-4 w-4 text-gray-600" />
                        <span>All Users ({nonLtdClients.length})</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="unassigned">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-gray-400" />
                        <span>Unassigned ({unassignedCount})</span>
                      </div>
                    </SelectItem>
                    {users
                      .filter(user => (userClientCounts?.[user.id] || 0) > 0)
                      .sort((a, b) => (userClientCounts?.[b.id] || 0) - (userClientCounts?.[a.id] || 0))
                      .map((user) => (
                      <SelectItem key={user.id} value={user.id}>
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-blue-600" />
                          <span>{user.name}</span>
                          <span className="text-xs text-muted-foreground">({userClientCounts?.[user.id] || 0})</span>
                        </div>
                      </SelectItem>
                    ))}
                    {users
                      .filter(user => (userClientCounts?.[user.id] || 0) === 0)
                      .sort((a, b) => a.name.localeCompare(b.name))
                      .map((user) => (
                      <SelectItem key={user.id} value={user.id}>
                        <div className="flex items-center gap-2">
                          <User className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-500">{user.name}</span>
                          <span className="text-xs text-muted-foreground">(0)</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Workflow Stage Filter Dropdown */}
              <div className="flex items-center gap-2">
                <Label htmlFor="stage-filter" className="text-sm font-medium whitespace-nowrap">
                  Filter by Stage:
                </Label>
                <Select value={selectedWorkflowStageFilter} onValueChange={setSelectedWorkflowStageFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="Select stage..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">
                      <div className="flex items-center gap-2">
                        <Briefcase className="h-4 w-4 text-gray-600" />
                        <span>All Stages</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="not_started">
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-gray-400" />
                        <span>Not Started</span>
                      </div>
                    </SelectItem>
                    {WORKFLOW_STAGES.map((stage) => (
                      <SelectItem key={stage.key} value={stage.key}>
                        <div className="flex items-center gap-2">
                          {stage.icon}
                          <span>{stage.label}</span>
                        </div>
                      </SelectItem>
                    ))}
                    <SelectItem value="completed">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="h-4 w-4 text-green-600" />
                        <span>Completed</span>
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Advanced Filter Button */}
              <Button
                variant={hasActiveAdvancedFilters() ? "default" : "outline"}
                size="sm"
                onClick={() => setAdvancedFilterModalOpen(true)}
                className="flex items-center gap-2"
              >
                <Filter className="h-4 w-4" />
                Advanced Filters
                {hasActiveAdvancedFilters() && (
                  <Badge variant="secondary" className="ml-1 text-xs">
                    Active
                  </Badge>
                )}
              </Button>
            </div>

            {/* Bulk Operations */}
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleClearSelection}
                disabled={selectedClients.size === 0}
              >
                <Undo2 className="h-4 w-4 mr-1" />
                Clear Selection
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  const selectedIds = Array.from(selectedClients)
                  if (selectedIds.length > 0) {
                    setSelectedClient(nonLtdClients.find(c => c.id === selectedIds[0]) || null)
                    setSelectedWorkflow(nonLtdClients.find(c => c.id === selectedIds[0])?.currentNonLtdAccountsWorkflow || null)
                    setShowUpdateModal(true)
                  }
                }}
                disabled={selectedClients.size === 0}
              >
                <Edit className="h-4 w-4 mr-1" />
                Bulk Update
              </Button>
            </div>
          </div>

          {/* Clear Advanced Filters */}
          {hasActiveAdvancedFilters() && (
            <div className="flex items-center gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <Filter className="h-4 w-4 text-blue-600" />
              <span className="text-sm text-blue-800">Advanced filters are active</span>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearAdvancedFilter}
                className="text-blue-600 hover:text-blue-700"
              >
                Clear filters
              </Button>
            </div>
          )}

          {/* Data Table */}
          <Card>
            <CardContent className="p-0">
              <div className="table-container">
                <Table className="data-table">
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-12">
                        <Checkbox
                          checked={selectedClients.size === nonLtdClients.length && nonLtdClients.length > 0}
                          onCheckedChange={handleSelectAllClients}
                          aria-label="Select all"
                        />
                      </TableHead>
                      <SortableHeader column="clientCode" className="w-20">Code</SortableHeader>
                      <SortableHeader column="companyName" className="w-48">Company Name</SortableHeader>
                      <SortableHeader column="yearEnd" className="w-24">Year End</SortableHeader>
                      <SortableHeader column="filingDue" className="w-24">Filing Due</SortableHeader>
                      <SortableHeader column="workflowStage" className="w-40">Workflow Stage</SortableHeader>
                      <SortableHeader column="assignedTo" className="w-32">Assigned To</SortableHeader>
                      <TableHead className="w-16">Update</TableHead>
                      <TableHead className="w-16">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {loading ? (
                      <TableRow>
                        <TableCell colSpan={9} className="text-center py-8">
                          <div className="flex items-center justify-center">
                            <Clock className="h-4 w-4 animate-spin mr-2" />
                            Loading...
                          </div>
                        </TableCell>
                      </TableRow>
                    ) : nonLtdClients.length === 0 ? (
                      <TableRow>
                        <TableCell colSpan={9} className="text-center py-8 text-muted-foreground">
                          No non-Ltd companies found
                        </TableCell>
                      </TableRow>
                    ) : (
                      nonLtdClients.map((client) => {
                        const workflow = client.currentNonLtdAccountsWorkflow
                        const statusObj = getWorkflowStatus(workflow || null)
                        const dueInfo = getDaysUntilDue(workflow?.filingDueDate, workflow || null)
                        const assignee = workflow?.assignedUser || client.nonLtdCompanyAssignedUser || client.assignedUser
                        const rowKey = client.id

                        return (
                          <React.Fragment key={client.id}>
                            <TableRow className="hover:bg-muted/50">
                              <TableCell>
                                <Checkbox
                                  checked={selectedClients.has(client.id)}
                                  onCheckedChange={(checked) => handleSelectClient(client.id, checked as boolean)}
                                  aria-label={`Select ${client.companyName}`}
                                />
                              </TableCell>
                              <TableCell className="font-mono text-sm">
                                {client.clientCode}
                              </TableCell>
                              <TableCell>
                                <div className="font-medium truncate" title={client.companyName}>
                                  {client.companyName}
                                </div>
                              </TableCell>
                              <TableCell>
                                <div className="text-sm">
                                  {formatDate(workflow?.yearEndDate)}
                                </div>
                              </TableCell>
                              <TableCell>
                                <div className="text-sm">
                                  {dueInfo ? (
                                    <div className={`flex items-center gap-1 ${
                                      dueInfo.status === 'overdue' ? 'text-red-600' :
                                      dueInfo.status === 'due_soon' ? 'text-orange-600' :
                                      dueInfo.status === 'completed' ? 'text-green-600' :
                                      'text-muted-foreground'
                                    }`}>
                                      {dueInfo.status === 'overdue' && <AlertCircle className="h-3 w-3" />}
                                      {dueInfo.status === 'due_soon' && <AlertTriangle className="h-3 w-3" />}
                                      {dueInfo.status === 'completed' && <CheckCircle className="h-3 w-3" />}
                                      <span>
                                        {dueInfo.status === 'overdue' ? `Overdue by ${dueInfo.days} days` :
                                         dueInfo.status === 'due_soon' ? `Due in ${dueInfo.days} days` :
                                         dueInfo.status === 'completed' ? 'Completed' :
                                         `Due in ${dueInfo.days} days`}
                                      </span>
                                    </div>
                                  ) : (
                                    formatDate(workflow?.filingDueDate)
                                  )}
                                </div>
                              </TableCell>
                              <TableCell>
                                <Badge variant={statusObj.variant}>
                                  {statusObj.status}
                                </Badge>
                              </TableCell>
                              <TableCell>
                                <div className="flex items-center gap-2">
                                  {assignee ? (
                                    <>
                                      <User className="h-3 w-3 text-muted-foreground" />
                                      <span className="text-sm truncate" title={assignee.name}>
                                        {assignee.name}
                                      </span>
                                    </>
                                  ) : (
                                    <span className="text-sm text-muted-foreground">Unassigned</span>
                                  )}
                                </div>
                              </TableCell>
                              <TableCell>
                                {workflow && !workflow.isCompleted && (
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => {
                                      setSelectedClient(client)
                                      setSelectedWorkflow(workflow)
                                      setShowUpdateModal(true)
                                    }}
                                    className="flex items-center gap-1 h-6 px-2 text-xs"
                                  >
                                    <Plus className="h-3 w-3" />
                                    Update
                                  </Button>
                                )}
                              </TableCell>
                              <TableCell className="table-actions-cell">
                                <DropdownMenu>
                                  <DropdownMenuTrigger asChild>
                                    <Button variant="ghost" className="action-trigger-button">
                                      <Settings className="action-trigger-icon" />
                                      <span className="sr-only">Open menu</span>
                                    </Button>
                                  </DropdownMenuTrigger>
                                  <DropdownMenuContent align="end" className="w-48">
                                    <DropdownMenuItem 
                                      onClick={() => router.push(`/dashboard/clients/${client.id}`)}
                                      className="flex items-center gap-2 cursor-pointer"
                                    >
                                      <Eye className="h-4 w-4" />
                                      View Details
                                    </DropdownMenuItem>
                                    <DropdownMenuItem 
                                      onClick={() => handleViewActivityLog(client)}
                                      className="flex items-center gap-2 cursor-pointer"
                                    >
                                      <Clock className="h-4 w-4" />
                                      View Log
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem 
                                      onClick={() => {
                                        setEmailClient(client)
                                        setSendEmailModalOpen(true)
                                      }}
                                      className="flex items-center gap-2 cursor-pointer"
                                      disabled={!client.contactEmail}
                                    >
                                      <Mail className="h-4 w-4" />
                                      Send Mail
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem 
                                      onClick={() => router.push(`/dashboard/clients/${client.id}/edit`)}
                                      className="flex items-center gap-2 cursor-pointer"
                                    >
                                      <Edit className="h-4 w-4" />
                                      Edit Client
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem
                                      onClick={() => {
                                        const newExpanded = new Set(expandedRows)
                                        if (expandedRows.has(rowKey)) {
                                          newExpanded.delete(rowKey)
                                        } else {
                                          newExpanded.add(rowKey)
                                        }
                                        setExpandedRows(newExpanded)
                                      }}
                                      className="flex items-center gap-2 cursor-pointer"
                                    >
                                      {expandedRows.has(rowKey) ? (
                                        <>
                                          <ChevronDown className="h-4 w-4" />
                                          Hide Timeline
                                        </>
                                      ) : (
                                        <>
                                          <ChevronRight className="h-4 w-4" />
                                          Show Timeline
                                        </>
                                      )}
                                    </DropdownMenuItem>
                                  </DropdownMenuContent>
                                </DropdownMenu>
                              </TableCell>
                            </TableRow>
                            
                            {/* Expanded Row - Workflow Timeline */}
                            {expandedRows.has(rowKey) && (
                              <TableRow>
                                <TableCell colSpan={9} className="p-0">
                                  {renderNonLtdWorkflowTimeline(client)}
                                </TableCell>
                              </TableRow>
                            )}
                          </React.Fragment>
                        )
                      })
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>

          {/* Pagination */}
          {totalCount > 0 && (
            <div className="flex items-center justify-between">
              <div className="text-sm text-muted-foreground">
                Showing {nonLtdClients.length} of {totalCount} companies
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => fetchNonLtdClients(false, currentPage - 1)}
                  disabled={currentPage === 1 || loading}
                >
                  Previous
                </Button>
                <span className="text-sm">
                  Page {currentPage} of {Math.ceil(totalCount / 50)}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => fetchNonLtdClients(false, currentPage + 1)}
                  disabled={currentPage === Math.ceil(totalCount / 50) || loading}
                >
                  Next
                </Button>
              </div>
            </div>
          )}
        </PageContent>
      </PageLayout>

      {/* Workflow Update Modal - Enhanced Design */}
      <Dialog open={showUpdateModal} onOpenChange={setShowUpdateModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Update Non-Ltd Company Workflow</DialogTitle>
            <DialogDescription>
              Update workflow stage and assignment for {selectedClient?.companyName}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Current Status Display */}
            {selectedClient?.currentNonLtdAccountsWorkflow && (
              <div className="bg-muted/20 p-3 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <Briefcase className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm font-medium">Current Status</span>
                </div>
                <div className="flex items-center justify-between gap-4">
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="text-xs">
                      {getWorkflowStatus(selectedClient.currentNonLtdAccountsWorkflow).status}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <User className="h-3 w-3 text-muted-foreground" />
                    <span className="font-medium">
                      {selectedClient.currentNonLtdAccountsWorkflow.assignedUser?.name || 
                       selectedClient.nonLtdCompanyAssignedUser?.name || 
                       selectedClient.assignedUser?.name || 'Unassigned'}
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* Workflow Stage Selection */}
            <div className="space-y-2">
              <Label htmlFor="stage-select">Update Workflow Stage</Label>
              <Select value={selectedStage || ''} onValueChange={handleStageChange}>
                <SelectTrigger>
                  <SelectValue placeholder="Select stage to update to..." />
                </SelectTrigger>
                <SelectContent>
                  {WORKFLOW_STAGES.map((stage) => {
                    const currentStageIndex = WORKFLOW_STAGES.findIndex(s => s.key === selectedClient?.currentNonLtdAccountsWorkflow?.currentStage)
                    const stageIndex = WORKFLOW_STAGES.findIndex(s => s.key === stage.key)
                    const isCompletedStage = currentStageIndex !== -1 && stageIndex < currentStageIndex
                    const isCurrentStage = stage.key === selectedClient?.currentNonLtdAccountsWorkflow?.currentStage
                    
                    return (
                      <SelectItem 
                        key={stage.key} 
                        value={stage.key}
                        className={`
                          ${isCurrentStage ? 'bg-gradient-to-r from-blue-50 to-blue-100 border-l-4 border-l-blue-500 font-medium' : ''}
                          ${isCompletedStage ? 'bg-gray-50 opacity-70 text-gray-500' : ''}
                          ${!isCurrentStage && !isCompletedStage ? 'hover:bg-gray-50' : ''}
                          transition-all duration-200
                        `}
                      >
                        <div className="flex items-center gap-2 w-full">
                          <div className={`
                            ${isCurrentStage ? 'scale-110 text-blue-600' : ''} 
                            ${isCompletedStage ? 'grayscale opacity-60' : ''}
                            transition-all duration-200
                          `}>
                            {stage.icon}
                          </div>
                          <span className={`
                            ${isCurrentStage ? 'font-bold text-blue-800' : ''} 
                            ${isCompletedStage ? 'text-gray-500 line-through' : ''}
                          `}>
                            {stage.label}
                          </span>
                          {isCurrentStage && (
                            <Badge className="ml-auto text-xs bg-blue-600 text-white font-semibold shadow-md animate-pulse">
                              ⚡ CURRENT
                            </Badge>
                          )}
                          {isCompletedStage && !isCurrentStage && (
                            <Badge variant="outline" className="ml-auto text-xs text-gray-400 border-gray-300">
                              ✅ COMPLETED
                            </Badge>
                          )}
                        </div>
                      </SelectItem>
                    )
                  })}
                </SelectContent>
              </Select>
            </div>

            {/* Assignment Selection */}
            <div className="space-y-2">
              <Label htmlFor="assignee-select">Assign to User</Label>
              <Select value={selectedAssignee} onValueChange={setSelectedAssignee}>
                <SelectTrigger>
                  <SelectValue placeholder="Select assignee..." />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="unassigned">
                    <div className="flex items-center gap-2">
                      <User className="h-3 w-3 text-gray-400" />
                      <span>Unassigned</span>
                    </div>
                  </SelectItem>
                  {session?.user?.id && (
                    <SelectItem value={session.user.id}>
                      <div className="flex items-center gap-2">
                        <User className="h-3 w-3 text-blue-600" />
                        <span className="font-medium text-blue-600">Assign to Me</span>
                        <span className="text-xs text-blue-500">({session.user.role})</span>
                      </div>
                    </SelectItem>
                  )}
                  {users
                    .filter(user => user.id !== session?.user?.id)
                    .map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      <div className="flex items-center gap-2">
                        <User className="h-3 w-3 text-gray-600" />
                        <span>{user.name}</span>
                        <span className="text-xs text-muted-foreground">({user.role})</span>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Comments */}
            <div className="space-y-2">
              <Label htmlFor="comments">Comments (Optional)</Label>
              <Textarea
                id="comments"
                value={updateComments}
                onChange={(e) => setUpdateComments(e.target.value)}
                placeholder="Add any notes about this update..."
                rows={3}
              />
            </div>
          </div>

          <DialogFooter className="gap-2">
            <Button 
              variant="outline" 
              onClick={() => setShowUpdateModal(false)}
              disabled={updating}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleSubmitUpdate}
              disabled={updating || !selectedStage}
            >
              {updating ? (
                <>
                  <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                  Updating...
                </>
              ) : (
                'Update Workflow'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Activity Log Modal */}
      <Dialog open={showActivityLogModal} onOpenChange={setShowActivityLogModal}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Activity Log - {activityLogClient?.companyName}</DialogTitle>
          </DialogHeader>
          {activityLogClient && (
            <ActivityLogViewer
              clientId={activityLogClient.id}
              title=""
              showFilters={true}
              showExport={true}
              limit={50}
            />
          )}
        </DialogContent>
      </Dialog>

      {/* Send Email Modal */}
      {emailClient && (
        <SendEmailModal
          open={sendEmailModalOpen}
          onOpenChange={setSendEmailModalOpen}
          client={{
            id: emailClient.id,
            companyName: emailClient.companyName,
            contactEmail: emailClient.contactEmail || '',
            contactName: emailClient.contactName || ''
          }}
        />
      )}

      {/* Advanced Filter Modal */}
      <AdvancedFilterModal
        isOpen={advancedFilterModalOpen}
        onClose={() => setAdvancedFilterModalOpen(false)}
        onApplyFilters={handleApplyAdvancedFilters}
        currentFilter={advancedFilter}
        users={users}
        tableType="non-ltd"
      />
    </>
  )
} 