---
description: "Numericalz Core Repository Rules - Always Applied"
alwaysApply: true
---

# Numericalz Internal Management System - Core Rules

## üéØ Project Overview
This is the Numericalz Internal Management System - a UK-based accounting firm management platform built with Next.js 14, TypeScript, Prisma, and PostgreSQL.

## üö® CRITICAL PROTECTION RULES - READ FIRST

### üõ°Ô∏è ABSOLUTE NEVER DELETE RULES
- **NEVER** delete any existing functionality without explicit user approval
- **NEVER** remove working APIs, components, or database operations
- **NEVER** change existing API response formats or data structures
- **NEVER** remove imports, exports, or dependencies that are being used
- **NEVER** modify working authentication or authorization logic
- **NEVER** change database schema without migration strategy
- **NEVER** remove existing client management features
- **NEVER** alter working contact management (email/phone icons)
- **NEVER** change responsive design or layout systems
- **NEVER** remove client assignment functionality

### üîí FUNCTIONALITY PRESERVATION MANDATE
- **ALWAYS** preserve existing functionality when refactoring
- **ALWAYS** maintain backward compatibility
- **ALWAYS** test functionality before and after changes
- **ALWAYS** add comments explaining why code is being modified
- **ALWAYS** use deprecation warnings before removing features
- **ALWAYS** backup critical sections before major changes
- If code seems unused, comment it out with a note rather than deleting it

## üõ†Ô∏è Technology Stack Guidelines

### Next.js 14 (App Router)
- Use App Router exclusively (app/ directory)
- Server Components by default, Client Components when needed
- Use proper loading.tsx, error.tsx, and not-found.tsx files
- Implement proper metadata for SEO
- Use route groups with parentheses for organization: (auth), (dashboard)

### TypeScript Standards
- Use strict TypeScript configuration
- Define interfaces for all data structures
- Use proper generic types where applicable
- Avoid 'any' type - use 'unknown' or proper typing
- Export types from dedicated types/ directory

### React/Next.js Component Rules
- Use functional components with hooks exclusively
- Implement proper error boundaries
- Use React.memo() for performance optimization where needed
- Prefer composition over inheritance
- Use proper key props in lists

## üìÅ File Organization & Naming

### Directory Structure
```
app/
‚îú‚îÄ‚îÄ (auth)/           # Authentication routes
‚îú‚îÄ‚îÄ (dashboard)/      # Protected dashboard routes
‚îú‚îÄ‚îÄ api/             # API routes
components/
‚îú‚îÄ‚îÄ ui/              # Reusable UI components (ShadCN)
‚îú‚îÄ‚îÄ forms/           # Form components
‚îú‚îÄ‚îÄ dashboard/       # Dashboard-specific components
‚îú‚îÄ‚îÄ clients/         # Client management components
‚îú‚îÄ‚îÄ layout/          # Layout components
‚îî‚îÄ‚îÄ shared/          # Shared components
lib/
‚îú‚îÄ‚îÄ auth.ts          # Authentication utilities
‚îú‚îÄ‚îÄ db.ts            # Database connection with retry logic
‚îú‚îÄ‚îÄ companies-house.ts # Companies House API
‚îú‚îÄ‚îÄ email.ts         # Email utilities
‚îú‚îÄ‚îÄ utils.ts         # General utilities
‚îî‚îÄ‚îÄ validations.ts   # Zod schemas
```

### Naming Conventions
- Components: PascalCase (e.g., `ClientCard.tsx`)
- Files/Directories: kebab-case (e.g., `client-management/`)
- Variables/Functions: camelCase (e.g., `getUserClients`)
- Constants: UPPER_SNAKE_CASE (e.g., `API_BASE_URL`)
- Database tables: snake_case (e.g., `user_clients`)

## üéØ DEVELOPMENT PHILOSOPHY
**REMEMBER**: This system manages critical UK accounting firm operations
- **Data Integrity > Feature Velocity** - Never compromise data for speed
- **User Experience Consistency > Individual Preferences** - Follow established patterns
- **Business Logic Preservation > Code Cleanliness** - Don't break working systems
- **Compliance Requirements > Technical Preferences** - UK regulations come first
- **Client Relationship Protection > System Efficiency** - Don't disrupt client assignments

## üèÅ FINAL CHECKPOINT REMINDER

### Before submitting ANY work:
1. **Functionality Test**: Does everything work exactly as before?
2. **Database Safety**: Did I follow the safety protocol for any schema changes?
3. **Design Consistency**: Does the UI match the established design system?
4. **Responsive Check**: Does it work on mobile, tablet, and desktop?
5. **Security Verification**: Are all authentication and authorization checks in place?
6. **Business Logic Integrity**: Are client assignments and VAT workflows preserved?
7. **Error Handling**: Are all edge cases and error scenarios handled?
8. **Performance Impact**: Does this maintain or improve performance?
9. **Documentation**: Have I documented any new functionality?
10. **Testing**: Have I tested all affected functionality thoroughly?

**ZERO TOLERANCE for violations of these rules. The integrity of this accounting firm management system depends on strict adherence to these standards.**

### üö´ FORBIDDEN MODIFICATIONS WITHOUT APPROVAL
- Date calculation logic (must use centralized functions from lib/year-end-utils.ts)
- Accounts due date calculations (ALWAYS use companyData.accounts.next_due directly from Companies House)
- Client code generation logic (NZ-1, NZ-2 format)
- Contact icon functionality (email/phone click actions)
- User assignment system and API endpoints
- Responsive table design and layout
- Authentication and session management
- Database connection and retry logic
- Companies House API integration
- Layout system and CSS classes

## üìã Core Development Principles

### üîí Code Preservation Rules
- When refactoring, ALWAYS maintain backward compatibility
- When updating components, preserve all existing props and functionality
- When modifying API endpoints, maintain existing response formats
- NEVER remove database fields or tables without migration strategy
- ALWAYS use deprecation warnings before removing features
