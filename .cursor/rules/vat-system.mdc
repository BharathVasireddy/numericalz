# üé® VAT ASSIGNMENT SYSTEM - CRITICAL UNDERSTANDING

## üö® ABSOLUTE VAT ASSIGNMENT RULES - NEVER VIOLATE
These rules are the result of comprehensive system cleanup and MUST be followed:

- **NEVER** re-introduce client-level VAT assignments (`Client.vatAssignedUserId`)
- **NEVER** create fallback assignment logic for VAT quarters
- **NEVER** sync VAT quarter assignments to client-level fields
- **NEVER** use complex priority hierarchies for VAT assignments
- **ALWAYS** use quarter-level assignments only (`VATQuarter.assignedUserId`)
- **ALWAYS** keep VAT quarters independent from each other
- **ALWAYS** start new VAT quarters unassigned (`assignedUserId = null`)

## üìö VAT ASSIGNMENT SYSTEM ARCHITECTURE

### üéØ CURRENT SYSTEM (Post-Cleanup - July 2025)

The VAT assignment system uses **QUARTER-LEVEL ASSIGNMENTS ONLY**:

```typescript
// ‚úÖ CORRECT VAT ASSIGNMENT ARCHITECTURE
interface VATQuarter {
  id: string
  clientId: string
  assignedUserId: string | null  // ONLY assignment field for VAT
  quarterPeriod: string
  currentStage: VATWorkflowStage
  isCompleted: boolean
  // ... milestone fields
}

// ‚úÖ CORRECT: Get VAT assignee
function getVATAssignee(vatQuarter: VATQuarter): User | null {
  return vatQuarter.assignedUser || null  // No fallback logic
}

// ‚ùå FORBIDDEN: Client-level VAT assignments
interface Client {
  vatAssignedUserId: string     // REMOVED - DO NOT RE-ADD
  vatAssignedUser: User         // REMOVED - DO NOT RE-ADD
}
```

### üö´ REMOVED SYSTEM (Historical Context - DO NOT RESTORE)

The old system had a complex 3-tier assignment priority that was **COMPLETELY REMOVED**:

```typescript
// ‚ùå OLD SYSTEM (REMOVED - DO NOT RESTORE)
function getVATAssignee(client: Client): User | null {
  // Priority 1: Quarter assignee
  if (client.currentVATQuarter?.assignedUser) return client.currentVATQuarter.assignedUser
  // Priority 2: Client VAT assignee (REMOVED)
  if (client.vatAssignedUser) return client.vatAssignedUser
  // Priority 3: General assignee (REMOVED for VAT)
  if (client.assignedUser) return client.assignedUser
  return null
}
```

### üèóÔ∏è WHY QUARTER-LEVEL ASSIGNMENTS ONLY

1. **Clear Ownership**: Each quarter has one clear assignee
2. **Temporal Independence**: Q1 assignee ‚â† Q2 assignee automatically
3. **No Confusion**: No fallback logic or priority hierarchies
4. **Realistic Workflow**: Different quarters can have different specialists
5. **Audit Trail**: Clear history of who worked on which quarter
6. **Simplified Logic**: Easy to understand and maintain

## üìã VAT ASSIGNMENT BUSINESS RULES

### üîÑ Assignment Lifecycle

```
Client Enables VAT ‚Üí VAT Quarter Created ‚Üí Quarter Starts Unassigned ‚Üí 
Filing Month Arrives ‚Üí Manager/Partner Assigns Quarter ‚Üí 
User Processes Quarter ‚Üí Quarter Completed ‚Üí Next Quarter Starts Unassigned
```

### üìè Assignment Rules

1. **Independence**: Each VAT quarter is assigned separately
2. **Unassigned Start**: New quarters start with `assignedUserId = null`
3. **Filing Month Assignment**: Quarters assigned during their filing month
4. **Future Quarters**: Future quarters remain unassigned until filing month
5. **No Inheritance**: No assignment inheritance from client or previous quarters
6. **No Fallback**: No fallback to client-level or general assignments

## üíæ DATABASE SCHEMA RULES

### ‚úÖ CURRENT SCHEMA (Correct)

```typescript
// ‚úÖ CORRECT Client Model (VAT fields only)
model Client {
  id                          String       @id @default(cuid())
  assignedUserId              String?      // General assignment
  ltdCompanyAssignedUserId    String?      // Ltd company assignment
  nonLtdCompanyAssignedUserId String?      // Non-Ltd assignment
  // vatAssignedUserId REMOVED - DO NOT RE-ADD
  
  vatQuartersWorkflow         VATQuarter[] // VAT quarters with quarter-level assignments
  
  // vatAssignedUser relation REMOVED - DO NOT RE-ADD
}

// ‚úÖ CORRECT VATQuarter Model
model VATQuarter {
  id                          String    @id @default(cuid())
  clientId                    String
  assignedUserId              String?   // ONLY VAT assignment field
  
  assignedUser                User?     @relation(fields: [assignedUserId])
  client                      Client    @relation(fields: [clientId])
}
```

### ‚ùå FORBIDDEN SCHEMA ADDITIONS

```typescript
// ‚ùå DO NOT RE-ADD THESE FIELDS
model Client {
  vatAssignedUserId           String?   // REMOVED - DO NOT RE-ADD
  vatAssignedUser             User?     // REMOVED - DO NOT RE-ADD
}

// ‚ùå DO NOT RE-ADD THESE RELATIONS
model User {
  vatAssignedClients          Client[]  // REMOVED - DO NOT RE-ADD
}
```

## üîß API ENDPOINT RULES

### ‚úÖ CORRECT API PATTERNS

```typescript
// ‚úÖ CORRECT: Quarter-level assignment
PUT /api/vat-quarters/[id]/workflow
{
  assignedUserId: "user123"  // Assigns THIS quarter only
}

// ‚úÖ CORRECT: Get VAT quarters with assignments
GET /api/clients/vat-clients
// Returns quarters with quarter.assignedUser only
```

### ‚ùå FORBIDDEN API PATTERNS

```typescript
// ‚ùå FORBIDDEN: Client-level VAT assignment (REMOVED)
POST /api/clients/[id]/assign-vat  // ENDPOINT REMOVED

// ‚ùå FORBIDDEN: Complex assignment logic
GET /api/clients/[id]
{
  vatAssignee: client.vatAssignedUser || client.assignedUser  // NO FALLBACK
}
```

## üñ•Ô∏è FRONTEND COMPONENT RULES

### ‚úÖ CORRECT COMPONENT PATTERNS

```typescript
// ‚úÖ CORRECT: Show quarter assignment only
function VATQuarterDisplay({ vatQuarter }: Props) {
  const assignee = vatQuarter.assignedUser
  
  return (
    <div>
      {assignee ? assignee.name : 'Unassigned'}
    </div>
  )
}

// ‚úÖ CORRECT: Assignment modal for quarter
function VATWorkflowModal({ vatQuarter }: Props) {
  const updateAssignment = async (userId: string) => {
    await fetch(`/api/vat-quarters/${vatQuarter.id}/workflow`, {
      method: 'PUT',
      body: JSON.stringify({ assignedUserId: userId })
    })
  }
}
```

### ‚ùå FORBIDDEN COMPONENT PATTERNS

```typescript
// ‚ùå FORBIDDEN: Client-level VAT assignment display
function VATClientDisplay({ client }: Props) {
  // DO NOT show client.vatAssignedUser (REMOVED)
  const assignee = client.vatAssignedUser || client.assignedUser  // NO FALLBACK
}

// ‚ùå FORBIDDEN: Client-level VAT assignment modal
function ClientVATAssignModal({ client }: Props) {
  // DO NOT create client-level VAT assignment modals
}
```

## üìä WORKLOAD CALCULATION RULES

### ‚úÖ CORRECT WORKLOAD LOGIC

```typescript
// ‚úÖ CORRECT: Count VAT quarters assigned to user
const userVATWorkload = await db.vATQuarter.count({
  where: {
    assignedUserId: userId,
    isCompleted: false
  }
})
```

### ‚ùå FORBIDDEN WORKLOAD LOGIC

```typescript
// ‚ùå FORBIDDEN: Complex multi-source counting
const userVATWorkload = await db.client.count({
  where: {
    OR: [
      { vatAssignedUserId: userId },        // REMOVED FIELD
      { assignedUserId: userId },           // NO FALLBACK FOR VAT
      { vatQuartersWorkflow: { some: { assignedUserId: userId } } }
    ]
  }
})
```

## üìù DOCUMENTATION REQUIREMENTS

### üìñ Required Documentation

When working with VAT assignments, always refer to:
1. **Schema Documentation**: `prisma/schema.prisma` (comprehensive comments)
2. **Cleanup Documentation**: `docs/VAT_ASSIGNMENT_SYSTEM_CLEANUP.md`
3. **Verification Script**: `scripts/verify-vat-functionality.js`
4. **This Cursor Rules Section**: For quick reference

### üí≠ Code Comments Requirements

```typescript
// ‚úÖ REQUIRED: Add detailed comments for VAT assignment code
function assignVATQuarter(quarterId: string, userId: string) {
  // VAT ASSIGNMENT RULE: Each quarter has independent assignment
  // No client-level sync, no fallback logic
  // See docs/VAT_ASSIGNMENT_SYSTEM_CLEANUP.md for context
  
  return db.vATQuarter.update({
    where: { id: quarterId },
    data: { assignedUserId: userId }
  })
}
```

## üß™ TESTING REQUIREMENTS

### üîç Mandatory Testing

Before any VAT-related changes:

```bash
# 1. Run verification script
node scripts/verify-vat-functionality.js

# 2. Test VAT workflow manually
# - Create VAT quarter
# - Assign to user
# - Update workflow stage
# - Verify assignment display

# 3. Check dashboard widgets
# - VAT unassigned widget
# - User workload calculations
# - VAT deadline tables
```

### ‚ö†Ô∏è Critical Test Cases

1. **Quarter Assignment**: Assign quarter to user
2. **Assignment Display**: Show assignee in UI
3. **Workload Calculation**: Count user's VAT quarters
4. **Workflow Progression**: Stage changes with assignment
5. **Dashboard Widgets**: All VAT widgets work correctly

## üö® VIOLATION CONSEQUENCES

Violating VAT assignment rules results in:

1. **Client-Level VAT Assignment**: Immediate removal required
2. **Fallback Logic**: Must be simplified to quarter-only
3. **Complex Priority**: Must be replaced with quarter assignment
4. **Schema Changes**: Must follow database safety protocol
5. **Missing Documentation**: Must add comprehensive comments

## üìö REFERENCE FILES

Essential files for VAT assignment understanding:
- `prisma/schema.prisma` - Database schema with comprehensive documentation
- `docs/VAT_ASSIGNMENT_SYSTEM_CLEANUP.md` - Complete cleanup documentation
- `app/api/vat-quarters/[id]/workflow/route.ts` - Main assignment API
- `components/clients/vat-workflow-modal.tsx` - Assignment UI
- `lib/deadline-utils.ts` - Assignment display logic
- `scripts/verify-vat-functionality.js` - Testing and verification
description:
globs:
alwaysApply: false
---
