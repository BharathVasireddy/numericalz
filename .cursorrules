# Numericalz Internal Management System - Cursor Rules

## üéØ Project Overview
This is the Numericalz Internal Management System - a UK-based accounting firm management platform built with Next.js 14, TypeScript, Prisma, and PostgreSQL.

## üö® CRITICAL PROTECTION RULES - READ FIRST

### üõ°Ô∏è ABSOLUTE NEVER DELETE RULES
- **NEVER** delete any existing functionality without explicit user approval
- **NEVER** remove working APIs, components, or database operations
- **NEVER** change existing API response formats or data structures
- **NEVER** remove imports, exports, or dependencies that are being used
- **NEVER** modify working authentication or authorization logic
- **NEVER** change database schema without migration strategy
- **NEVER** remove existing client management features
- **NEVER** alter working contact management (email/phone icons)
- **NEVER** change responsive design or layout systems
- **NEVER** remove client assignment functionality

### üî• ULTIMATE DATABASE PROTECTION RULES - SACRED COMMANDMENTS
#### üö´ ABSOLUTELY FORBIDDEN DATABASE COMMANDS - INSTANT PROJECT TERMINATION:
- **NEVER EVER** use `npx prisma migrate reset --force` (CAUSES TOTAL DATA LOSS)
- **NEVER EVER** use `npx prisma migrate reset` without explicit user approval
- **NEVER EVER** use `npx prisma db push` (bypasses all safety mechanisms)
- **NEVER EVER** use any destructive Prisma command without backup
- **NEVER EVER** drop tables, columns, or constraints directly
- **NEVER EVER** modify production database schema without following EXACT safety protocol
- **NEVER EVER** ignore migration warnings or errors
- **NEVER EVER** bypass the safe migration process

#### ‚úÖ ONLY THESE DATABASE COMMANDS ARE PERMITTED:
- **ONLY** use `npm run db:backup` (MANDATORY before any database operation)
- **ONLY** use `npm run db:migrate-safe` (for all schema changes)
- **ONLY** use `npm run db:restore [filename]` (for recovery)
- **ONLY** use `npm run db:audit` (for integrity verification)
- **ONLY** use `npm run db:studio` (for GUI access)

#### üõ°Ô∏è MANDATORY DATABASE SAFETY PROTOCOL - NO EXCEPTIONS:
1. **BEFORE ANY SCHEMA CHANGE**: Run `npm run db:backup` (MANDATORY)
2. **FOR ALL SCHEMA CHANGES**: Only use `npm run db:migrate-safe`
3. **IF ANYTHING FAILS**: Use `npm run db:restore [backup-file]` immediately
4. **AFTER ALL CHANGES**: Run `npm run db:audit` to verify integrity
5. **DOCUMENT EVERYTHING**: Explain why database changes are needed
6. **TEST FIRST**: Always test migrations on development copy first

#### üö® DATA PROTECTION MINDSET - PRODUCTION ALWAYS:
- Treat EVERY database as production data with real client information
- EVERY table contains critical UK accounting firm data
- EVERY row represents real business relationships and compliance data
- DATA LOSS = BUSINESS FAILURE = PROJECT TERMINATION
- Client assignment data is SACRED - never break relationships
- VAT workflow data is COMPLIANCE CRITICAL - never corrupt
- User authentication data is SECURITY CRITICAL - never compromise

#### üîê SCHEMA CHANGE APPROVAL MATRIX:
- **Minor additions** (new optional fields): Backup + Safe migration
- **Major changes** (new tables, relationships): User approval required
- **Field removals**: FORBIDDEN without explicit user approval
- **Table drops**: FORBIDDEN without explicit user approval
- **Index changes**: Backup + Safe migration + Performance testing
- **Constraint changes**: User approval + Backup + Safe migration

### üîí FUNCTIONALITY PRESERVATION MANDATE
- **ALWAYS** preserve existing functionality when refactoring
- **ALWAYS** maintain backward compatibility
- **ALWAYS** test functionality before and after changes
- **ALWAYS** add comments explaining why code is being modified
- **ALWAYS** use deprecation warnings before removing features
- **ALWAYS** backup critical sections before major changes
- If code seems unused, comment it out with a note rather than deleting it

## üé® ABSOLUTE CODE CONSISTENCY RULES

### üìù MANDATORY TypeScript Standards
```typescript
// ‚úÖ REQUIRED - Strict typing for all functions
interface ClientData {
  id: string
  clientCode: string
  companyName: string
  assignedUserId?: string
}

async function updateClient(id: string, data: Partial<ClientData>): Promise<ClientData> {
  // Implementation with proper error handling
}

// ‚ùå FORBIDDEN - No 'any' types allowed
const clientData: any = {} // NEVER DO THIS

// ‚úÖ REQUIRED - Proper error handling pattern
try {
  const result = await apiCall()
  return { success: true, data: result }
} catch (error) {
  console.error('Operation failed:', error)
  return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
}
```

### üèóÔ∏è MANDATORY Component Architecture
```typescript
// ‚úÖ REQUIRED - Complete component template
'use client' // Only when client-side features needed

import React, { useState, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import type { ComponentProps } from '@/types'

interface ComponentNameProps {
  data: ComponentProps[]
  onAction: (id: string) => void
  isLoading?: boolean
  className?: string
}

export function ComponentName({ 
  data, 
  onAction, 
  isLoading = false,
  className 
}: ComponentNameProps) {
  const [localState, setLocalState] = useState<string>('')
  
  const handleAction = useCallback((id: string) => {
    try {
      onAction(id)
    } catch (error) {
      console.error('Action failed:', error)
    }
  }, [onAction])
  
  if (isLoading) return <div>Loading...</div>
  
  return (
    <div className={`base-component-styles ${className}`}>
      {/* Component content */}
    </div>
  )
}

ComponentName.displayName = 'ComponentName'
```

### üõ°Ô∏è MANDATORY API Route Pattern
```typescript
// ‚úÖ REQUIRED - Complete API route template
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { auth } from '@/lib/auth'
import { db } from '@/lib/db'

const RequestSchema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email format'),
})

export async function POST(request: NextRequest) {
  try {
    // 1. MANDATORY: Authentication check first
    const session = await auth()
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    // 2. MANDATORY: Request validation
    const body = await request.json()
    const validatedData = RequestSchema.parse(body)
    
    // 3. MANDATORY: Business logic with error handling
    const result = await db.model.create({ data: validatedData })
    
    // 4. MANDATORY: Consistent response format
    return NextResponse.json({ success: true, data: result })
    
  } catch (error) {
    console.error('API Error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        error: 'Invalid request data',
        details: error.errors
      }, { status: 400 })
    }
    
    return NextResponse.json({
      error: 'Internal server error'
    }, { status: 500 })
  }
}
```

## üéØ ABSOLUTE DESIGN CONSISTENCY RULES

### üìê MANDATORY Layout System - NO EXCEPTIONS
```tsx
// ‚úÖ REQUIRED - Use standardized layout for ALL pages
import { PageLayout, PageHeader, PageContent } from '@/components/layout/page-layout'

export default function MyPage() {
  return (
    <PageLayout maxWidth="xl">
      <PageHeader 
        title="Page Title"
        description="Page description"
      >
        {/* Optional header actions */}
      </PageHeader>
      <PageContent>
        {/* Page content sections */}
      </PageContent>
    </PageLayout>
  )
}

// ‚úÖ ALTERNATIVE - Using CSS classes directly
export default function MyPage() {
  return (
    <div className="page-container">
      <div className="content-wrapper">
        <div className="content-sections">
          {/* Page content */}
        </div>
      </div>
    </div>
  )
}

// ‚ùå FORBIDDEN - Custom layouts without standardized classes
export default function MyPage() {
  return (
    <div className="p-4 mx-auto"> {/* NEVER DO THIS */}
      {/* Content */}
    </div>
  )
}
```

### üì± MANDATORY Responsive Design Rules
```css
/* ‚úÖ REQUIRED - Fixed table layout to prevent horizontal scrolling */
.table-container {
  @apply w-full overflow-hidden; /* NEVER use overflow-x-auto */
}

.data-table {
  @apply table-fixed w-full; /* ALWAYS use table-fixed */
}

/* ‚úÖ REQUIRED - Specific column widths */
.col-client-code { @apply w-20; }     /* 80px */
.col-company-name { @apply w-48; }    /* 192px - Main content */
.col-contact { @apply w-20; }         /* 80px - Contact icons */
.col-assigned { @apply w-32; }        /* 128px */
.col-actions { @apply w-16; }         /* 64px */

/* ‚úÖ REQUIRED - Text truncation with tooltips */
.truncate-text {
  @apply truncate;
  title: attr(data-full-text);
}
```

### üìß MANDATORY Contact Management Standards
```tsx
// ‚úÖ REQUIRED - Email icon implementation
import { Mail, Phone } from 'lucide-react'

function ContactIcons({ email, phone }: { email: string; phone?: string }) {
  return (
    <div className="flex items-center gap-2">
      <a 
        href={`mailto:${email}`}
        className="text-muted-foreground hover:text-foreground transition-colors"
        title={`Email: ${email}`}
      >
        <Mail className="h-3 w-3" />
      </a>
      {phone && (
        <a 
          href={`tel:${phone}`}
          className="text-muted-foreground hover:text-foreground transition-colors"
          title={`Call: ${phone}`}
        >
          <Phone className="h-3 w-3" />
        </a>
      )}
    </div>
  )
}

// ‚ùå FORBIDDEN - Different icon sizes or missing functionality
<Mail className="h-4 w-4" /> {/* WRONG SIZE */}
<Mail onClick={() => {}} />   {/* MISSING MAILTO */}
```

### üé® MANDATORY Action Icon Standards
```css
/* ‚úÖ REQUIRED - Consistent action icon styling */
.action-trigger-icon {
  @apply h-4 w-4; /* EXACT SIZE REQUIRED */
}

.action-button {
  @apply h-8 w-8 p-0; /* EXACT BUTTON SIZE REQUIRED */
}

/* ‚úÖ REQUIRED - Hover states */
.action-button:hover .action-trigger-icon {
  @apply text-foreground;
}
```

## üîê MANDATORY SECURITY & VALIDATION RULES

### üõ°Ô∏è Input Validation - NO EXCEPTIONS
```typescript
// ‚úÖ REQUIRED - Zod validation for ALL inputs
const ClientValidation = z.object({
  companyName: z.string()
    .min(1, 'Company name is required')
    .max(255, 'Company name too long')
    .regex(/^[a-zA-Z0-9\s&.-]+$/, 'Invalid characters'),
  
  email: z.string()
    .email('Invalid email format')
    .toLowerCase(),
    
  vatNumber: z.string()
    .regex(/^GB\d{9}$/, 'Invalid UK VAT number format')
    .optional()
})

// ‚ùå FORBIDDEN - No validation
const createClient = async (data: any) => { // NEVER DO THIS
  await db.client.create({ data })
}
```

### üîí Authentication Pattern - MANDATORY
```typescript
// ‚úÖ REQUIRED - Authentication check in ALL protected routes
export async function POST(request: NextRequest) {
  const session = await auth()
  if (!session) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }
  
  // Role-based authorization
  if (session.user.role !== 'MANAGER' && session.user.role !== 'PARTNER') {
    return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 })
  }
  
  // Proceed with authorized operation
}
```

## üéØ MANDATORY BUSINESS LOGIC RULES

### üìÖ DATE CALCULATION SYSTEM - ABSOLUTELY CRITICAL
```typescript
// üéØ MANDATORY: Use ONLY centralized date calculation functions
import { 
  calculateYearEnd, 
  calculateAccountsDue, 
  calculateCorporationTaxDue,
  formatYearEnd,
  getYearEndForTable,
  getYearEndForForm 
} from '@/lib/year-end-utils'

// ‚úÖ REQUIRED - For all year end calculations
const yearEnd = calculateYearEnd(clientData)
const yearEndDisplay = getYearEndForTable(clientData) // Tables: "30 Sept 2024" or "‚Äî"
const yearEndForm = getYearEndForForm(clientData)     // Forms: "30 Sept 2024" or "Not set"

// ‚úÖ REQUIRED - For statutory date calculations  
const accountsDue = calculateAccountsDue(clientData)     // Year end + 9 months
const ctDue = calculateCorporationTaxDue(clientData)     // Year end + 12 months

// ‚ùå FORBIDDEN - NEVER use Companies House dates directly
// nextAccountsDue: companyData.accounts?.next_due ‚ùå NEVER DO THIS
// nextCorporationTaxDue: chData.accounts?.next_due ‚ùå NEVER DO THIS

// ‚ùå FORBIDDEN - NEVER calculate dates inline
// const accountsDue = new Date(yearEnd); accountsDue.setMonth(accountsDue.getMonth() + 9) ‚ùå

// ‚úÖ REQUIRED - ClientYearEndData interface for all calculations
interface ClientYearEndData {
  accountingReferenceDate?: string | null  // JSON: {"day":"30","month":"09"} or ISO
  lastAccountsMadeUpTo?: string | Date | null
  incorporationDate?: string | Date | null
}
```

### üìä Client Management - SACRED FUNCTIONALITY
```typescript
// ‚úÖ REQUIRED - Client code generation (NEVER CHANGE)
function generateClientCode(): string {
  // Find last NZ- code and increment
  // Format: NZ-1, NZ-2, NZ-3, etc.
  // NEVER change this logic without explicit approval
}

// ‚úÖ REQUIRED - Assignment priority system (PRESERVE EXACTLY)
function getAssignedUser(client: Client, workType: 'VAT' | 'ACCOUNTS'): User | null {
  if (workType === 'VAT') {
    return client.currentVATQuarter?.assignedUser || 
           client.vatAssignedUser || 
           client.assignedUser
  }
  return client.assignedUser
}
```

### üì± Contact Management - EXACT IMPLEMENTATION
```typescript
// ‚úÖ REQUIRED - Email functionality (NEVER CHANGE)
const handleEmailClick = (email: string) => {
  window.location.href = `mailto:${email}`
}

// ‚úÖ REQUIRED - Phone functionality (NEVER CHANGE)  
const handlePhoneClick = (phone: string) => {
  window.location.href = `tel:${phone}`
}
```

## üéØ PROJECT CONTEXT AWARENESS - MANDATORY UNDERSTANDING

### üè¢ Business Domain Understanding - CRITICAL
- **UK Accounting Firm Management**: This is NOT a generic business app
- **Compliance Critical**: Every feature affects UK tax compliance and legal requirements
- **Client Relationship Management**: Disrupting client assignments = business relationship damage
- **VAT Workflow System**: Complex 11-stage VAT return processing system
- **Real Production Data**: Contains real UK company data from Companies House API
- **Multi-User System**: Staff, Manager, Partner roles with different permissions
- **Timeline Critical**: VAT deadlines are HMRC compliance requirements

### üìä Data Relationships - SACRED CONNECTIONS
```typescript
// ‚úÖ UNDERSTAND - Critical data relationships (NEVER BREAK)
Client -> VATQuarter -> VATWorkflowHistory  // VAT compliance chain
Client -> User (multiple assignment types)   // Work assignment relationships  
Client -> Companies House Data              // UK government data sync
User -> Role -> Permissions                 // Security authorization chain
VATQuarter -> Milestones -> Compliance     // Legal deadline tracking
```

### üîÑ Workflow Context - MISSION CRITICAL
- **VAT Return Processing**: 11-stage workflow from paperwork to HMRC filing
- **Client Assignment System**: Complex multi-type assignments (General, VAT, Ltd Accounts)
- **Companies House Integration**: Automatic UK company data synchronization
- **Deadline Management**: Statutory deadlines affect client compliance
- **Audit Trail**: Complete activity logging for compliance and legal requirements

## üö® ENFORCEMENT & ACCOUNTABILITY RULES

### üõ°Ô∏è PRE-WORK MANDATORY CHECKLIST
Before making ANY changes, MUST verify:
- [ ] Does this involve date calculations? (If yes ‚Üí MUST use lib/year-end-utils.ts functions)
- [ ] Does this use Companies House data? (If yes ‚Üí NEVER use accounts.next_due directly)
- [ ] Does this change affect existing functionality? (If yes ‚Üí User approval required)
- [ ] Does this involve database schema? (If yes ‚Üí Follow EXACT safety protocol)
- [ ] Does this change client assignments? (If yes ‚Üí Extreme caution required)
- [ ] Does this affect VAT workflows? (If yes ‚Üí Compliance verification required)
- [ ] Does this change contact management? (If yes ‚Üí Test email/phone functionality)
- [ ] Does this alter responsive design? (If yes ‚Üí Test on all device sizes)
- [ ] Does this modify authentication? (If yes ‚Üí Security review required)

### üîç POST-WORK MANDATORY VERIFICATION
After making ANY changes, MUST verify:
- [ ] All date calculations use centralized functions (no hardcoded date logic)
- [ ] No Companies House date overrides introduced (accounts.next_due not used)
- [ ] All existing functionality still works exactly as before
- [ ] No horizontal scrolling introduced anywhere
- [ ] Contact icons still work (email opens mailto, phone opens tel)
- [ ] Client assignment system unchanged
- [ ] Database integrity maintained (run npm run db:audit)
- [ ] No TypeScript errors introduced
- [ ] Responsive design maintained across all breakpoints
- [ ] Authentication and authorization unchanged

### üö® VIOLATION CONSEQUENCES
Violating these rules results in:
1. **Database Safety Violations**: Immediate project termination
2. **Date Calculation Violations**: Immediate fix required - NEVER use hardcoded dates or Companies House overrides
3. **Functionality Removal**: Immediate rollback required  
4. **Design Inconsistency**: Must fix before any other work
5. **Security Violations**: Immediate security review required
6. **Business Logic Changes**: User approval and comprehensive testing required

### üìö MANDATORY REFERENCE DOCUMENTATION
Before ANY development work, MUST review:
- `CLAUDE.md` - Complete project understanding
- `docs/VAT_SYSTEM_DOCUMENTATION.md` - VAT workflow system
- `docs/DATABASE_SCHEMA.md` - Database structure and relationships
- `docs/API_DOCUMENTATION.md` - API endpoint specifications
- `docs/DESIGN_SYSTEM.md` - UI/UX standards and components
- `docs/DATE_CALCULATION_SYSTEM.md` - Centralized date calculation functions and rules

### üéØ DEVELOPMENT PHILOSOPHY
**REMEMBER**: This system manages critical UK accounting firm operations
- **Data Integrity > Feature Velocity** - Never compromise data for speed
- **User Experience Consistency > Individual Preferences** - Follow established patterns
- **Business Logic Preservation > Code Cleanliness** - Don't break working systems
- **Compliance Requirements > Technical Preferences** - UK regulations come first
- **Client Relationship Protection > System Efficiency** - Don't disrupt client assignments

## üèÅ FINAL CHECKPOINT REMINDER

### Before submitting ANY work:
1. **Functionality Test**: Does everything work exactly as before?
2. **Database Safety**: Did I follow the safety protocol for any schema changes?
3. **Design Consistency**: Does the UI match the established design system?
4. **Responsive Check**: Does it work on mobile, tablet, and desktop?
5. **Security Verification**: Are all authentication and authorization checks in place?
6. **Business Logic Integrity**: Are client assignments and VAT workflows preserved?
7. **Error Handling**: Are all edge cases and error scenarios handled?
8. **Performance Impact**: Does this maintain or improve performance?
9. **Documentation**: Have I documented any new functionality?
10. **Testing**: Have I tested all affected functionality thoroughly?

**ZERO TOLERANCE for violations of these rules. The integrity of this accounting firm management system depends on strict adherence to these standards.**

### üö´ FORBIDDEN MODIFICATIONS WITHOUT APPROVAL
- **Date calculation logic** (must use centralized functions from lib/year-end-utils.ts)
- **Companies House date overrides** (NEVER use companyData.accounts.next_due directly)
- Client code generation logic (NZ-1, NZ-2 format)
- Contact icon functionality (email/phone click actions)
- User assignment system and API endpoints
- Responsive table design and layout
- Authentication and session management
- Database connection and retry logic
- Companies House API integration
- Layout system and CSS classes

## üìã Core Development Principles

### üîí Code Preservation Rules
- When refactoring, ALWAYS maintain backward compatibility
- When updating components, preserve all existing props and functionality
- When modifying API endpoints, maintain existing response formats
- NEVER remove database fields or tables without migration strategy
- ALWAYS use deprecation warnings before removing features

## üõ†Ô∏è Technology Stack Guidelines

### Next.js 14 (App Router)
- Use App Router exclusively (app/ directory)
- Server Components by default, Client Components when needed
- Use proper loading.tsx, error.tsx, and not-found.tsx files
- Implement proper metadata for SEO
- Use route groups with parentheses for organization: (auth), (dashboard)

### TypeScript Standards
- Use strict TypeScript configuration
- Define interfaces for all data structures
- Use proper generic types where applicable
- Avoid 'any' type - use 'unknown' or proper typing
- Export types from dedicated types/ directory

### React/Next.js Component Rules
- Use functional components with hooks exclusively
- Implement proper error boundaries
- Use React.memo() for performance optimization where needed
- Prefer composition over inheritance
- Use proper key props in lists

## üìÅ File Organization & Naming

### Directory Structure
```
app/
‚îú‚îÄ‚îÄ (auth)/           # Authentication routes
‚îú‚îÄ‚îÄ (dashboard)/      # Protected dashboard routes
‚îú‚îÄ‚îÄ api/             # API routes
‚îÇ   ‚îú‚îÄ‚îÄ clients/     # Client management APIs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [id]/    # Individual client operations
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ assign/        # User assignment
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ reassign/      # User reassignment
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ resign/        # Client resignation
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ refresh-companies-house/  # CH data refresh
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bulk-assign/       # Bulk user assignment
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bulk-resign/       # Bulk resignation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bulk-refresh/      # Bulk CH refresh
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ export/            # Data export
‚îÇ   ‚îú‚îÄ‚îÄ companies-house/       # Companies House integration
‚îÇ   ‚îú‚îÄ‚îÄ users/                 # User management APIs
‚îÇ   ‚îî‚îÄ‚îÄ auth/                  # Authentication APIs
‚îú‚îÄ‚îÄ globals.css      # Global styles with layout system
‚îú‚îÄ‚îÄ layout.tsx       # Root layout
‚îî‚îÄ‚îÄ page.tsx         # Home page

components/
‚îú‚îÄ‚îÄ ui/              # Reusable UI components (ShadCN)
‚îú‚îÄ‚îÄ forms/           # Form components
‚îú‚îÄ‚îÄ dashboard/       # Dashboard-specific components
‚îú‚îÄ‚îÄ clients/         # Client management components
‚îÇ   ‚îú‚îÄ‚îÄ clients-table.tsx      # Main clients table with contact icons
‚îÇ   ‚îú‚îÄ‚îÄ assign-user-modal.tsx  # User assignment modal
‚îÇ   ‚îî‚îÄ‚îÄ bulk-operations.tsx    # Bulk operations component
‚îú‚îÄ‚îÄ layout/          # Layout components
‚îÇ   ‚îî‚îÄ‚îÄ page-layout.tsx        # Standardized page layouts
‚îî‚îÄ‚îÄ shared/          # Shared components

lib/
‚îú‚îÄ‚îÄ auth.ts          # Authentication utilities
‚îú‚îÄ‚îÄ db.ts            # Database connection with retry logic
‚îú‚îÄ‚îÄ companies-house.ts # Companies House API
‚îú‚îÄ‚îÄ email.ts         # Email utilities
‚îú‚îÄ‚îÄ utils.ts         # General utilities
‚îî‚îÄ‚îÄ validations.ts   # Zod schemas
```

### Naming Conventions
- Components: PascalCase (e.g., `ClientCard.tsx`)
- Files/Directories: kebab-case (e.g., `client-management/`)
- Variables/Functions: camelCase (e.g., `getUserClients`)
- Constants: UPPER_SNAKE_CASE (e.g., `API_BASE_URL`)
- Database tables: snake_case (e.g., `user_clients`)

## üé® UI/UX Guidelines

### Design System Standards
- Use Tailwind CSS exclusively for styling
- Use ShadCN/UI components as base components
- Maintain consistent spacing using Tailwind spacing scale
- Use semantic color classes (e.g., `text-primary`, `bg-secondary`)
- Implement proper focus states for accessibility

### Component Architecture Standards
- Create reusable components in components/ui/
- Use compound components for complex UI patterns
- Implement proper loading and error states
- Use Framer Motion for animations consistently
- Maintain consistent button heights and spacing

### Contact Management Standards
- **Email Icons**: Use Mail icon from Lucide React
- **Phone Icons**: Use Phone icon from Lucide React
- **Click Actions**: Email opens mailto:, Phone opens tel:
- **Icon Sizing**: Consistent h-3 w-3 for contact icons
- **Hover Effects**: text-muted-foreground hover:text-foreground
- **Tooltips**: Show full contact info with title attribute

### Action Icon Standards
- **Consistent Sizing**: h-4 w-4 for all action icons
- **Button Container**: h-8 w-8 p-0 for icon buttons
- **CSS Class**: Use .action-trigger-icon for consistent styling
- **Hover States**: Smooth transitions with proper color changes

### Responsive Design Rules
- Mobile-first approach using Tailwind responsive prefixes
- **NO HORIZONTAL SCROLLING** - Content must fit viewport
- **Fixed Table Layout**: Use table-fixed for consistent columns
- Use proper touch targets (minimum 44px)
- Implement proper keyboard navigation

## üìê STANDARDIZED LAYOUT SYSTEM

### CRITICAL: Layout Consistency Rules
- **ALWAYS** use the standardized layout system for ALL pages
- **NEVER** use old layout classes (`container-padding`, `section-spacing`, `content-spacing`)
- **ALWAYS** use new layout components for consistency
- **NEVER** create horizontal scrolling
- **ALWAYS** ensure content fits within viewport

### Required Layout Structure for ALL Pages
```tsx
// Option 1: Using layout components (PREFERRED)
import { PageLayout, PageHeader, PageContent } from '@/components/layout/page-layout'

export default function MyPage() {
  return (
    <PageLayout maxWidth="xl">
      <PageHeader 
        title="Page Title"
        description="Page description"
      >
        {/* Optional header actions */}
      </PageHeader>
      <PageContent>
        {/* Page content sections */}
      </PageContent>
    </PageLayout>
  )
}

// Option 2: Using CSS classes directly
export default function MyPage() {
  return (
    <div className="page-container">
      <div className="content-wrapper">
        <div className="content-sections">
          {/* Page content */}
        </div>
      </div>
    </div>
  )
}
```

### Layout CSS Classes
- `.page-container` - Main page wrapper with consistent padding
- `.content-wrapper` - Content container with max-width and centering
- `.content-sections` - Sections wrapper with consistent spacing
- `.page-header` - Standardized page header with bottom border
- `.action-trigger-icon` - Consistent action icon styling

### Table Layout Standards
- **Use table-fixed**: Prevents horizontal scrolling
- **Column Widths**: Specific widths for each column type
  - Client Code: w-20 (80px)
  - Company Number: w-24 (96px)
  - Company Name: w-48 (192px) - Main content column
  - Dates: w-20 or w-24 (80-96px)
  - Contact: w-20 (80px) - For contact icons
  - Assigned To: w-32 (128px)
  - Actions: w-16 (64px)
- **Text Truncation**: Use truncate with title tooltips

### Max Width Options
- `sm` - 672px (forms, simple pages)
- `md` - 896px (content pages)
- `lg` - 1152px (dashboard pages)
- `xl` - 1280px (default, most pages)
- `2xl` - No max width (full-width pages)
- `full` - Full width (special cases)

### Spacing Variables
```css
--layout-padding-x: 1rem;        /* Mobile horizontal padding */
--layout-padding-x-md: 1.5rem;   /* Tablet horizontal padding */
--layout-padding-x-lg: 2rem;     /* Desktop horizontal padding */

--layout-padding-y: 1.5rem;      /* Mobile vertical padding */
--layout-padding-y-md: 2rem;     /* Tablet vertical padding */
--layout-padding-y-lg: 2.5rem;   /* Desktop vertical padding */

--content-spacing: 1.5rem;       /* Mobile content spacing */
--content-spacing-md: 2rem;      /* Tablet content spacing */
--content-spacing-lg: 2.5rem;    /* Desktop content spacing */
```

## üóÑÔ∏è Database & API Standards

### Client Code Generation Rules
- **Format**: NZ-1, NZ-2, NZ-3, etc. (sequential numbering)
- **Function**: generateClientCode() in app/api/clients/route.ts
- **Logic**: Find last NZ- code, increment by 1
- **NEVER** change this format without explicit approval

### API Route Standards
- Use proper HTTP methods (GET, POST, PUT, DELETE)
- Implement proper error handling with status codes
- Use Zod for request/response validation
- Include proper authentication middleware
- Return consistent JSON response format:
```typescript
{
  success: boolean,
  data?: any,
  error?: string,
  message?: string
}
```

### Client Assignment API Rules
- **Endpoint**: POST /api/clients/[id]/assign
- **Body Parameter**: { userId: string | null }
- **NEVER** change parameter name from 'userId'
- **Response**: Include updated client with assignedUser data
- **Authentication**: Require MANAGER role

### Prisma Guidelines
- Use descriptive model names in PascalCase
- Include proper relations with clear foreign keys
- Use proper field types (DateTime, UUID, etc.)
- Include created_at and updated_at on all models
- Use enums for status fields

### Authentication Rules
- Use NextAuth.js for authentication
- Implement proper session management
- Use role-based access control (RBAC)
- Protect all API routes that need authentication
- Use proper JWT token handling

## üîß Code Quality Standards

### TypeScript Best Practices
- Use interface for object shapes, type for unions/primitives
- Implement proper error handling with try/catch
- Use async/await instead of promises chains
- Implement proper loading states with React Query
- Use proper TypeScript generics where applicable

### Performance Guidelines
- Use React.memo() for expensive components
- Implement proper code splitting with dynamic imports
- Use React Query for server state management
- Implement proper caching strategies
- Use Next.js Image component for images
- Implement proper database indexing

### Security Standards
- Validate all user inputs with Zod
- Sanitize data before database operations
- Use proper CORS configuration
- Implement rate limiting on API routes
- Use environment variables for sensitive data
- Hash passwords with bcrypt
- Implement proper session timeout

## üìù Documentation Requirements

### Code Documentation
- Add JSDoc comments for all functions and components
- Include prop types documentation for components
- Document complex business logic with inline comments
- Maintain up-to-date README.md files
- Document API endpoints with proper examples

### Commit Guidelines
- Use conventional commit format: `type(scope): description`
- Types: feat, fix, docs, style, refactor, test, chore
- Write descriptive commit messages
- Reference issue numbers when applicable

## üß™ Testing Standards

### Testing Requirements
- Write unit tests for utility functions
- Write integration tests for API routes
- Write component tests using React Testing Library
- Maintain test coverage above 80%
- Test error scenarios and edge cases

### Test Organization
- Place tests adjacent to source files: `component.test.tsx`
- Use descriptive test names
- Group related tests with describe blocks
- Mock external dependencies properly
- Use proper test data factories

## üöÄ Deployment & Environment

### Environment Management
- Use different env files for different environments
- Never commit sensitive data to version control
- Use proper environment variable validation
- Document all required environment variables

### Build & Deployment
- Ensure builds pass without warnings
- Test deployments in staging environment
- Use proper database migrations
- Implement proper logging for production
- Monitor application performance

## üîÑ Development Workflow

### Branch Strategy
- Use feature branches: `feature/client-management`
- Use descriptive branch names
- Keep branches small and focused
- Rebase before merging to main
- Delete branches after merging

### Code Review Guidelines
- Review for functionality, not just syntax
- Check for proper error handling
- Verify accessibility compliance
- Ensure proper TypeScript usage
- Check for performance implications
- **VERIFY LAYOUT CONSISTENCY** - Ensure new pages use standardized layout system
- **VERIFY NO HORIZONTAL SCROLLING** - Test responsive design
- **VERIFY CONTACT ICONS** - Ensure email/phone functionality works

## üéØ Business Logic Guidelines

### Client Management Rules
- Always validate company numbers with Companies House API
- Implement proper client assignment workflows
- Maintain audit trails for client changes
- Use proper date handling for UK accounting periods
- Implement proper client status tracking
- **PRESERVE** contact management functionality (email/phone icons)
- **MAINTAIN** client code generation (NZ-X format)

### Contact Management Rules
- **Email Icons**: Must open mailto: links
- **Phone Icons**: Must open tel: links
- **Responsive**: Icons must work on all device sizes
- **Accessibility**: Include proper titles and hover states
- **Consistency**: Same styling across desktop/tablet/mobile

### Task Management
- Use proper deadline tracking and notifications
- Implement workload balancing algorithms
- Maintain task history and status changes
- Use proper priority levels
- Implement recurring task support

### Communication System
- Use proper email template validation
- Implement proper notification queuing
- Maintain communication audit trails
- Use proper unsubscribe mechanisms
- Implement proper email delivery tracking

## ‚ö° Performance Optimization

### Frontend Performance
- Use proper image optimization with Next.js Image
- Implement proper bundle splitting
- Use proper caching headers
- Minimize JavaScript bundle size
- Use proper preloading strategies

### Backend Performance
- Use proper database indexing
- Implement query optimization
- Use proper caching strategies (Redis if needed)
- Implement proper connection pooling
- Monitor API response times

## üõ°Ô∏è Error Handling

### Error Boundaries
- Implement proper React error boundaries
- Use proper error logging services
- Provide user-friendly error messages
- Implement proper fallback UI components
- Log errors with proper context

### API Error Handling
- Use proper HTTP status codes
- Return consistent error response format
- Log errors with request context
- Implement proper validation error messages
- Use proper error recovery strategies

## üìä Analytics & Monitoring

### Logging Standards
- Use structured logging with proper levels
- Log important business events
- Include proper context in logs
- Use proper log rotation strategies
- Monitor error rates and performance

### Metrics Tracking
- Track user engagement metrics
- Monitor system performance metrics
- Track business KPIs
- Implement proper alerting
- Use proper dashboard visualization

## üîê CURRENT FUNCTIONALITY PROTECTION

### Contact Management (PROTECTED)
- Email icons with mailto: functionality
- Phone icons with tel: functionality
- Hover effects and tooltips
- Responsive design across all breakpoints

### Client Code Generation (PROTECTED)
- NZ-1, NZ-2, NZ-3 sequential format
- generateClientCode() function logic
- Database query for last client code

### User Assignment (PROTECTED)
- POST /api/clients/[id]/assign endpoint
- userId parameter in request body
- AssignUserModal component functionality

### Responsive Design (PROTECTED)
- Fixed table layout without horizontal scrolling
- Proper column widths and text truncation
- Mobile/tablet/desktop breakpoints

### Layout System (PROTECTED)
- Standardized CSS classes
- PageLayout components
- Consistent spacing and padding

---

## üéØ FINAL REMINDER: ABSOLUTE PROTECTION RULES

### NEVER DO THESE WITHOUT EXPLICIT APPROVAL:
1. Delete any existing functionality
2. Remove working APIs or endpoints
3. Change client code generation format
4. Remove contact icon functionality
5. Alter responsive design or create horizontal scrolling
6. Modify user assignment system
7. Change authentication or authorization logic
8. Remove layout system components
9. Delete database operations or queries
10. Change API response formats

### ALWAYS DO THESE:
1. Preserve existing functionality when refactoring
2. Test thoroughly before deploying changes
3. Use standardized layout system for new pages
4. Maintain responsive design without horizontal scrolling
5. Follow contact icon standards for new implementations
6. Use consistent action icon sizing
7. Implement proper error handling
8. Document all changes thoroughly
9. Follow TypeScript best practices
10. Maintain backward compatibility

These rules ensure code consistency, maintainability, reliability, and visual consistency while preserving all existing functionality throughout the development process. 