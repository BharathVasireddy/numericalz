generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  email              String          @unique
  name               String
  password           String
  role               String          @default("STAFF")
  isActive           Boolean         @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  activityLogs       ActivityLog[]
  
  // ENHANCED ASSIGNMENT RELATIONS - Different client assignments for different work types
  assignedClients           Client[]  @relation("ClientAssignedUser")
  ltdCompanyAssignedClients Client[]  @relation("ClientLtdAssignedUser")
  nonLtdCompanyAssignedClients Client[] @relation("ClientNonLtdAssignedUser")
  vatAssignedClients        Client[]  @relation("ClientVATAssignedUser")
  
  sentCommunications Communication[]
  notifications      Notification[]
  sessions           Session[]
  defaultAssigneeFor UserSettings[]  @relation("DefaultAssignee")
  settings           UserSettings?
  assignedVATQuarters VATQuarter[]
  vatWorkflowHistory VATWorkflowHistory[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Client {
  id                            String          @id @default(cuid())
  clientCode                    String          @unique
  companyNumber                 String?         @unique
  companyName                   String
  companyType                   String?
  companyStatus                 String?
  companyStatusDetail           String?
  incorporationDate             DateTime?
  cessationDate                 DateTime?
  registeredOfficeAddress       String?
  registeredOfficeAddressLine1  String?
  registeredOfficeAddressLine2  String?
  registeredOfficeAddressCity   String?
  registeredOfficeAddressCounty String?
  registeredOfficeAddressPostCode String?
  registeredOfficeAddressCountry String?
  sicCodes                      String?
  natureOfBusiness              String?
  nextAccountsDue               DateTime?
  lastAccountsMadeUpTo          DateTime?
  accountingReferenceDate       String?
  nextConfirmationDue           DateTime?
  lastConfirmationMadeUpTo      DateTime?
  nextCorporationTaxDue         DateTime?
  // Corporation Tax tracking fields
  corporationTaxStatus          String?         @default("UNKNOWN") // UNKNOWN, CURRENT, OVERDUE, DORMANT
  corporationTaxPeriodStart     DateTime?       // Start of current CT period
  corporationTaxPeriodEnd       DateTime?       // End of current CT period (year end)
  manualCTDueOverride           DateTime?       // Manual override by accountant
  ctDueSource                   String?         @default("AUTO") // AUTO, MANUAL
  lastCTStatusUpdate            DateTime?       // When CT status was last changed
  ctStatusUpdatedBy             String?         // User who updated CT status
  jurisdiction                  String?
  hasBeenLiquidated             Boolean         @default(false)
  hasCharges                    Boolean         @default(false)
  hasInsolvencyHistory          Boolean         @default(false)
  officers                      String?
  personsWithSignificantControl String?
  contactName                   String
  contactEmail                  String
  contactPhone                  String?
  contactFax                    String?
  website                       String?
  vatNumber                     String?
  yearEstablished               Int?
  numberOfEmployees             Int?
  annualTurnover                Float?
  paperworkFrequency            String?
  
  // ENHANCED ASSIGNMENT SYSTEM - Different staff for different work types
  assignedUserId                String?         // General assignment (legacy, kept for compatibility)
  ltdCompanyAssignedUserId      String?         // Staff assigned for Ltd company accounts work
  nonLtdCompanyAssignedUserId   String?         // Staff assigned for Non-Ltd company accounts work
  vatAssignedUserId             String?         // Staff assigned for VAT work
  
  isActive                      Boolean         @default(true)
  notes                         String?
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime        @updatedAt
  additionalComments            String?
  annualAccountingScheme        Boolean         @default(false)
  businessType                  String?
  dormantStatus                 Boolean         @default(false)
  flatRatePercentage            Float?
  jobCompleted                  Boolean         @default(false)
  jobCompletedDate              DateTime?
  nationalInsuranceNumber       String?
  natureOfTrade                 String?
  numberOfPartners              Int?
  paperWorkReceived             Boolean         @default(false)
  paperWorkReceivedDate         DateTime?
  partnershipTaxReturn          Boolean         @default(false)
  previousYearEnded             DateTime?
  previousYearJobCompletedDate  DateTime?
  previousYearSA100FiledDate    DateTime?
  previousYearWorkReceivedDate  DateTime?
  residentialAddressCountry     String?
  residentialAddressLine1       String?
  residentialAddressLine2       String?
  residentialAddressPostCode    String?
  sa100Filed                    Boolean         @default(false)
  sa100FiledDate                DateTime?
  smallCompanyExemption         Boolean         @default(false)
  staff                         String?
  tradingAddressCountry         String?
  tradingAddressLine1           String?
  tradingAddressLine2           String?
  tradingAddressPostCode        String?
  utrNumber                     String?
  vatDeregistrationDate         DateTime?
  vatFrequency                  String?
  vatQuartersWorkflow           VATQuarter[]
  vatRegistrationDate           DateTime?
  vatScheme                     String?
  workStatus                    String?
  // Post-creation questionnaire fields
  isVatEnabled                  Boolean         @default(false)
  vatReturnsFrequency           String?
  vatQuarterGroup               String?         // For quarterly VAT: "1_4_7_10", "2_5_8_11", "3_6_9_12"
  nextVatReturnDue              DateTime?
  requiresPayroll               Boolean         @default(false)
  requiresBookkeeping           Boolean         @default(false)
  requiresManagementAccounts    Boolean         @default(false)
  preferredContactMethod        String?
  specialInstructions           String?
  // Service management fields
  handlesAnnualAccounts         Boolean         @default(true)  // Whether we handle their annual accounts
  activityLogs                  ActivityLog[]
  
  // ENHANCED ASSIGNMENT RELATIONS
  assignedUser                  User?           @relation("ClientAssignedUser", fields: [assignedUserId], references: [id])
  ltdCompanyAssignedUser        User?           @relation("ClientLtdAssignedUser", fields: [ltdCompanyAssignedUserId], references: [id])
  nonLtdCompanyAssignedUser     User?           @relation("ClientNonLtdAssignedUser", fields: [nonLtdCompanyAssignedUserId], references: [id])
  vatAssignedUser               User?           @relation("ClientVATAssignedUser", fields: [vatAssignedUserId], references: [id])
  
  communications                Communication[]

  @@index([companyNumber])
  @@index([assignedUserId])
  @@index([ltdCompanyAssignedUserId])
  @@index([nonLtdCompanyAssignedUserId])
  @@index([vatAssignedUserId])
  @@index([isActive])
  @@index([companyType])
  @@index([companyStatus])
  @@index([nextAccountsDue])
  @@index([nextConfirmationDue])
  @@index([nextCorporationTaxDue])
  @@index([corporationTaxStatus])
  @@index([corporationTaxPeriodEnd])
  @@index([ctDueSource])
  @@map("clients")
}

model Communication {
  id           String    @id @default(cuid())
  type         String
  subject      String
  content      String
  sentAt       DateTime?
  scheduledAt  DateTime?
  clientId     String
  sentByUserId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  client       Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sentBy       User?     @relation(fields: [sentByUserId], references: [id])

  @@index([clientId])
  @@index([sentByUserId])
  @@index([type])
  @@index([sentAt])
  @@map("communications")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@map("notifications")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  timestamp DateTime @default(now())
  userId    String?
  clientId  String?
  details   String?
  client    Client?  @relation(fields: [clientId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([action])
  @@index([timestamp])
  @@map("activity_logs")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultAssigneeId  String?
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  defaultAssignee    User?    @relation("DefaultAssignee", fields: [defaultAssigneeId], references: [id])
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// VAT Workflow Management
model VATQuarter {
  id        String   @id @default(cuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Quarter Identification (full period)
  quarterPeriod     String    // e.g., "2023-11-01_to_2024-01-31"
  quarterStartDate  DateTime
  quarterEndDate    DateTime
  filingDueDate     DateTime
  quarterGroup      String    // "1/4/7/10", "2/5/8/11", "3/6/9/12"

  // Current Status
  currentStage      VATWorkflowStage @default(CLIENT_BOOKKEEPING)
  isCompleted       Boolean          @default(false)
  assignedUserId    String?
  assignedUser      User?            @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  // Key Milestone Dates with User Tracking
  chaseStartedDate           DateTime?
  chaseStartedByUserId       String?
  chaseStartedByUserName     String?
  
  paperworkReceivedDate      DateTime?
  paperworkReceivedByUserId  String?
  paperworkReceivedByUserName String?
  
  workStartedDate            DateTime?
  workStartedByUserId        String?
  workStartedByUserName      String?
  
  workFinishedDate           DateTime?
  workFinishedByUserId       String?
  workFinishedByUserName     String?
  
  sentToClientDate           DateTime?
  sentToClientByUserId       String?
  sentToClientByUserName     String?
  
  clientApprovedDate         DateTime?
  clientApprovedByUserId     String?
  clientApprovedByUserName   String?
  
  filedToHMRCDate            DateTime?
  filedToHMRCByUserId        String?
  filedToHMRCByUserName      String?

  // Workflow History
  workflowHistory VATWorkflowHistory[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, quarterPeriod])
  @@map("vat_quarters")
}

model VATWorkflowHistory {
  id            String   @id @default(cuid())
  vatQuarterId  String
  vatQuarter    VATQuarter @relation(fields: [vatQuarterId], references: [id], onDelete: Cascade)

  // Stage Change Information
  fromStage            VATWorkflowStage?
  toStage              VATWorkflowStage
  stageChangedAt       DateTime
  daysInPreviousStage  Int?

  // Preserved User Data (even if user is deleted)
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userName   String
  userEmail  String
  userRole   String

  // Additional Information
  notes      String?
  createdAt  DateTime @default(now())

  @@map("vat_workflow_history")
}

enum VATWorkflowStage {
  CLIENT_BOOKKEEPING
  PAPERWORK_CHASED
  PAPERWORK_RECEIVED
  WORK_IN_PROGRESS
  QUERIES_PENDING
  REVIEW_PENDING_MANAGER
  REVIEW_PENDING_PARTNER
  EMAILED_TO_PARTNER
  EMAILED_TO_CLIENT
  CLIENT_APPROVED
  FILED_TO_HMRC
}
