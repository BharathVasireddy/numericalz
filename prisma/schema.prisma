generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String               @id @default(cuid())
  email                        String               @unique
  name                         String
  password                     String
  role                         String               @default("STAFF")
  isActive                     Boolean              @default(true)
  lastLoginAt                  DateTime?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  accounts                     Account[]
  activityLogs                 ActivityLog[]
  assignedClients              Client[]             @relation("ClientAssignedUser")
  ltdCompanyAssignedClients    Client[]             @relation("ClientLtdAssignedUser")
  nonLtdCompanyAssignedClients Client[]             @relation("ClientNonLtdAssignedUser")
  vatAssignedClients           Client[]             @relation("ClientVATAssignedUser")
  sentCommunications           Communication[]
  notifications                Notification[]
  sessions                     Session[]
  defaultAssigneeFor           UserSettings[]       @relation("DefaultAssignee")
  settings                     UserSettings?
  assignedVATQuarters          VATQuarter[]
  vatWorkflowHistory           VATWorkflowHistory[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Client {
  id                              String          @id @default(cuid())
  clientCode                      String          @unique
  companyName                     String
  companyNumber                   String?         @unique
  companyType                     String?
  companyStatus                   String?
  companyStatusDetail             String?
  incorporationDate               DateTime?
  cessationDate                   DateTime?
  registeredOfficeAddress         String?
  sicCodes                        String?
  nextAccountsDue                 DateTime?
  lastAccountsMadeUpTo            DateTime?
  accountingReferenceDate         String?
  nextConfirmationDue             DateTime?
  lastConfirmationMadeUpTo        DateTime?
  jurisdiction                    String?
  hasBeenLiquidated               Boolean         @default(false)
  hasCharges                      Boolean         @default(false)
  hasInsolvencyHistory            Boolean         @default(false)
  officers                        String?
  personsWithSignificantControl   String?
  contactName                     String
  contactEmail                    String
  contactPhone                    String?
  contactFax                      String?
  website                         String?
  vatNumber                       String?
  yearEstablished                 Int?
  numberOfEmployees               Int?
  annualTurnover                  Float?
  paperworkFrequency              String?
  assignedUserId                  String?
  isActive                        Boolean         @default(true)
  notes                           String?
  createdAt                       DateTime        @default(now())
  updatedAt                       DateTime        @updatedAt
  additionalComments              String?
  annualAccountingScheme          Boolean         @default(false)
  businessType                    String?
  dormantStatus                   Boolean         @default(false)
  flatRatePercentage              Float?
  jobCompleted                    Boolean         @default(false)
  jobCompletedDate                DateTime?
  nationalInsuranceNumber         String?
  natureOfTrade                   String?
  numberOfPartners                Int?
  paperWorkReceived               Boolean         @default(false)
  paperWorkReceivedDate           DateTime?
  partnershipTaxReturn            Boolean         @default(false)
  previousYearEnded               DateTime?
  previousYearJobCompletedDate    DateTime?
  previousYearSA100FiledDate      DateTime?
  previousYearWorkReceivedDate    DateTime?
  residentialAddressCountry       String?
  residentialAddressLine1         String?
  residentialAddressLine2         String?
  residentialAddressPostCode      String?
  sa100Filed                      Boolean         @default(false)
  sa100FiledDate                  DateTime?
  smallCompanyExemption           Boolean         @default(false)
  staff                           String?
  tradingAddressCountry           String?
  tradingAddressLine1             String?
  tradingAddressLine2             String?
  tradingAddressPostCode          String?
  utrNumber                       String?
  vatDeregistrationDate           DateTime?
  vatFrequency                    String?
  vatRegistrationDate             DateTime?
  vatScheme                       String?
  workStatus                      String?
  isVatEnabled                    Boolean         @default(false)
  nextVatReturnDue                DateTime?
  preferredContactMethod          String?
  requiresBookkeeping             Boolean         @default(false)
  requiresManagementAccounts      Boolean         @default(false)
  requiresPayroll                 Boolean         @default(false)
  specialInstructions             String?
  vatReturnsFrequency             String?
  handlesAnnualAccounts           Boolean         @default(true)
  nextCorporationTaxDue           DateTime?
  corporationTaxPeriodEnd         DateTime?
  corporationTaxPeriodStart       DateTime?
  corporationTaxStatus            String?         @default("UNKNOWN")
  ctDueSource                     String?         @default("AUTO")
  ctStatusUpdatedBy               String?
  lastCTStatusUpdate              DateTime?
  manualCTDueOverride             DateTime?
  vatQuarterGroup                 String?
  ltdCompanyAssignedUserId        String?
  natureOfBusiness                String?
  nonLtdCompanyAssignedUserId     String?
  registeredOfficeAddressCity     String?
  registeredOfficeAddressCountry  String?
  registeredOfficeAddressCounty   String?
  registeredOfficeAddressLine1    String?
  registeredOfficeAddressLine2    String?
  registeredOfficeAddressPostCode String?
  vatAssignedUserId               String?
  activityLogs                    ActivityLog[]
  assignedUser                    User?           @relation("ClientAssignedUser", fields: [assignedUserId], references: [id])
  ltdCompanyAssignedUser          User?           @relation("ClientLtdAssignedUser", fields: [ltdCompanyAssignedUserId], references: [id])
  nonLtdCompanyAssignedUser       User?           @relation("ClientNonLtdAssignedUser", fields: [nonLtdCompanyAssignedUserId], references: [id])
  vatAssignedUser                 User?           @relation("ClientVATAssignedUser", fields: [vatAssignedUserId], references: [id])
  communications                  Communication[]
  vatQuartersWorkflow             VATQuarter[]

  @@index([companyNumber])
  @@index([assignedUserId])
  @@index([ltdCompanyAssignedUserId])
  @@index([nonLtdCompanyAssignedUserId])
  @@index([vatAssignedUserId])
  @@index([isActive])
  @@index([companyType])
  @@index([companyStatus])
  @@index([nextAccountsDue])
  @@index([nextConfirmationDue])
  @@index([nextCorporationTaxDue])
  @@index([corporationTaxStatus])
  @@index([corporationTaxPeriodEnd])
  @@index([ctDueSource])
  @@map("clients")
}

model Communication {
  id           String    @id @default(cuid())
  type         String
  subject      String
  content      String
  sentAt       DateTime?
  scheduledAt  DateTime?
  clientId     String
  sentByUserId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  client       Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sentBy       User?     @relation(fields: [sentByUserId], references: [id])

  @@index([clientId])
  @@index([sentByUserId])
  @@index([type])
  @@index([sentAt])
  @@map("communications")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@map("notifications")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  timestamp DateTime @default(now())
  userId    String?
  clientId  String?
  details   String?
  client    Client?  @relation(fields: [clientId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([action])
  @@index([timestamp])
  @@map("activity_logs")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultAssigneeId  String?
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  defaultAssignee    User?    @relation("DefaultAssignee", fields: [defaultAssigneeId], references: [id])
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model VATQuarter {
  id                          String               @id @default(cuid())
  clientId                    String
  quarterPeriod               String
  quarterStartDate            DateTime
  quarterEndDate              DateTime
  filingDueDate               DateTime
  quarterGroup                String
  currentStage                VATWorkflowStage     @default(CLIENT_BOOKKEEPING)
  isCompleted                 Boolean              @default(false)
  assignedUserId              String?
  chaseStartedDate            DateTime?
  chaseStartedByUserId        String?
  chaseStartedByUserName      String?
  paperworkReceivedDate       DateTime?
  paperworkReceivedByUserId   String?
  paperworkReceivedByUserName String?
  workStartedDate             DateTime?
  workStartedByUserId         String?
  workStartedByUserName       String?
  workFinishedDate            DateTime?
  workFinishedByUserId        String?
  workFinishedByUserName      String?
  sentToClientDate            DateTime?
  sentToClientByUserId        String?
  sentToClientByUserName      String?
  clientApprovedDate          DateTime?
  clientApprovedByUserId      String?
  clientApprovedByUserName    String?
  filedToHMRCDate             DateTime?
  filedToHMRCByUserId         String?
  filedToHMRCByUserName       String?
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  assignedUser                User?                @relation(fields: [assignedUserId], references: [id])
  client                      Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  workflowHistory             VATWorkflowHistory[]

  @@unique([clientId, quarterPeriod])
  @@map("vat_quarters")
}

model VATWorkflowHistory {
  id                  String            @id @default(cuid())
  vatQuarterId        String
  fromStage           VATWorkflowStage?
  toStage             VATWorkflowStage
  stageChangedAt      DateTime
  daysInPreviousStage Int?
  userId              String?
  userName            String
  userEmail           String
  userRole            String
  notes               String?
  createdAt           DateTime          @default(now())
  user                User?             @relation(fields: [userId], references: [id])
  vatQuarter          VATQuarter        @relation(fields: [vatQuarterId], references: [id], onDelete: Cascade)

  @@map("vat_workflow_history")
}

enum VATWorkflowStage {
  CLIENT_BOOKKEEPING
  WORK_IN_PROGRESS
  QUERIES_PENDING
  REVIEW_PENDING_MANAGER
  REVIEW_PENDING_PARTNER
  EMAILED_TO_PARTNER
  EMAILED_TO_CLIENT
  CLIENT_APPROVED
  FILED_TO_HMRC
  PAPERWORK_CHASED
  PAPERWORK_RECEIVED
  PENDING_TO_CHASE
}
