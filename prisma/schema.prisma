// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use String fields with validation in the application
// For PostgreSQL, these would be proper enums

// Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("STAFF") // PARTNER, MANAGER, STAFF
  isActive  Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedClients Client[]
  sentCommunications Communication[]
  activityLogs    ActivityLog[]
  notifications   Notification[]

  // NextAuth.js compatibility
  accounts Account[]
  sessions Session[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Client {
  id               String      @id @default(cuid())
  
  // Basic Company Information
  clientCode       String?     @unique // Optional unique client code
  companyName      String
  companyNumber    String?     @unique // Optional for Directors and Sub Contractors
  companyType      String      // LIMITED_COMPANY, NON_LIMITED_COMPANY, DIRECTOR, SUB_CONTRACTOR
  companyStatus    String?     // active, dissolved, liquidation, etc.
  companyStatusDetail String?  // More detailed status
  
  // Dates
  incorporationDate DateTime?  // When company was incorporated
  cessationDate    DateTime?   // When company ceased (if applicable)
  
  // Address Information
  registeredOfficeAddress String? // Full registered office address from Companies House (JSON string)
  tradingAddress   String?     // Trading address if different (user input, JSON string)
  residentialAddress String?   // Residential address (user input, JSON string)
  
  // Companies House Data
  sicCodes         String?     // Standard Industrial Classification codes (JSON array)
  nextAccountsDue  DateTime?   // Next accounts filing due date
  lastAccountsMadeUpTo DateTime? // Last accounts made up to date
  accountingReferenceDate String? // Accounting reference date (JSON string: {"day": "31", "month": "03"})
  nextConfirmationDue DateTime? // Next confirmation statement due
  lastConfirmationMadeUpTo DateTime? // Last confirmation statement date
  jurisdiction     String?     // england-wales, scotland, northern-ireland
  hasBeenLiquidated Boolean    @default(false)
  hasCharges       Boolean     @default(false)
  hasInsolvencyHistory Boolean @default(false)
  
  // Owner/Director Information (from Companies House)
  officers         String?     // Company officers/directors data (JSON array)
  personsWithSignificantControl String? // PSC data (JSON array)
  
  // Contact Information (User Input)
  contactName      String
  contactEmail     String
  contactPhone     String?
  contactFax       String?     // Fax number
  website          String?
  vatNumber        String?     // VAT registration number
  
  // Non Ltd Company specific fields
  natureOfTrade    String?     // Nature of Trade
  tradingAddressLine1 String? // Trading Address Line 1
  tradingAddressLine2 String? // Trading Address Line 2
  tradingAddressCountry String? // Trading Address Country
  tradingAddressPostCode String? // Trading Address Post Code
  residentialAddressLine1 String? // Residential Address Line 1
  residentialAddressLine2 String? // Residential Address Line 2
  residentialAddressCountry String? // Residential Address Country
  residentialAddressPostCode String? // Residential Address Post Code
  vatQuarters      String?     // VAT Quarters (Q1, Q2, Q3, Q4)
  nationalInsuranceNumber String? // National Insurance Number
  utrNumber        String?     // UTR Number (10 digits)
  paperWorkReceived Boolean @default(false) // Paper Work Received
  paperWorkReceivedDate DateTime? // Paper Work Received Date
  jobCompleted     Boolean @default(false) // Job Completed
  jobCompletedDate DateTime? // Job Completed Date
  sa100Filed       Boolean @default(false) // SA100 Filed
  sa100FiledDate   DateTime? // SA100 Filed Date
  workStatus       String?     // Work Status
  additionalComments String?   // Additional Comments
  staff            String?     // Staff assigned
  previousYearEnded DateTime?  // Previous Year Ended
  previousYearWorkReceivedDate DateTime? // Previous Year Work Received Date
  previousYearJobCompletedDate DateTime? // Previous Year Job Completed Date
  previousYearSA100FiledDate DateTime? // Previous Year SA100 Filed Date
  
  // Business Information (User Input)
  yearEstablished  Int?
  numberOfEmployees Int?
  annualTurnover   Float?
  paperworkFrequency String?   // MONTHLY, QUARTERLY, ANNUALLY
  
  // Extended VAT and business fields
  vatFrequency     String?     // MONTHLY, QUARTERLY, ANNUALLY
  vatScheme        String?     // STANDARD, FLAT_RATE, ANNUAL_ACCOUNTING
  vatRegistrationDate DateTime?
  vatDeregistrationDate DateTime?
  flatRatePercentage Float?
  annualAccountingScheme Boolean @default(false)
  businessType     String?     // SOLE_TRADER, PARTNERSHIP, LLP, OTHER
  numberOfPartners Int?
  partnershipTaxReturn Boolean @default(false)
  dormantStatus    Boolean @default(false)
  smallCompanyExemption Boolean @default(false)
  
  // System Information
  assignedUserId   String?
  isActive         Boolean @default(true)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  assignedUser     User?           @relation(fields: [assignedUserId], references: [id])
  communications   Communication[]
  activityLogs     ActivityLog[]

  @@index([companyNumber])
  @@index([assignedUserId])
  @@index([isActive])
  @@index([companyType])
  @@index([companyStatus])
  @@index([nextAccountsDue])
  @@index([nextConfirmationDue])
  @@map("clients")
}

model Communication {
  id          String            @id @default(cuid())
  type        String            // EMAIL, SMS, PHONE, LETTER, MEETING
  subject     String
  content     String
  sentAt      DateTime?
  scheduledAt DateTime?
  
  // Relations
  clientId String
  sentByUserId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  sentBy   User?  @relation(fields: [sentByUserId], references: [id])

  @@index([clientId])
  @@index([sentByUserId])
  @@index([type])
  @@index([sentAt])
  @@map("communications")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String?  // Comma-separated variable names
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model Notification {
  id        String           @id @default(cuid())
  type      String           // CLIENT_ADDED, SYSTEM_ALERT, EMAIL_SENT
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      String?          // Additional notification data as JSON string
  
  // Relations
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@map("notifications")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String   // CLIENT_CREATED, CLIENT_UPDATED, CLIENT_ASSIGNED, etc.
  details   String?  // Additional details as JSON string
  timestamp DateTime @default(now())
  
  // Relations
  userId   String?
  clientId String?
  
  user   User?   @relation(fields: [userId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@index([userId])
  @@index([clientId])
  @@index([action])
  @@index([timestamp])
  @@map("activity_logs")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
} 